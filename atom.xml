<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[crazysurfboy]]></title>
  <subtitle><![CDATA[爱摄影的码农]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.crazysurfboy.com/"/>
  <updated>2016-10-14T09:34:47.000Z</updated>
  <id>http://www.crazysurfboy.com/</id>
  
  <author>
    <name><![CDATA[冲浪]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Mac 重置 MySQL 密码]]></title>
    <link href="http://www.crazysurfboy.com/2016/10/14/MySqlResetPassword/"/>
    <id>http://www.crazysurfboy.com/2016/10/14/MySqlResetPassword/</id>
    <published>2016-10-13T16:00:00.000Z</published>
    <updated>2016-10-14T09:34:47.000Z</updated>
    <content type="html"><![CDATA[<blockquote><p>最近升级了系统了也随带升级了 <code>MySql</code> ，在安装时好像有提示<strong>临时密码</strong>，但很不幸我把它忘记了只能重设了。把它写成 <code>Blog</code> 当作笔记方便以后查找也可以给需要的人。</p>
</blockquote>
<p>重置 <code>MySql</code> 方法很简单，按如下命令直接输入就好</p>
<h3 id="1、找到并打开终端"><strong>1、找到并打开终端</strong></h3><p>停止 MySql 运行输入:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /usr/local/mysql/support-files/mysql<span class="variable">.server</span> stop</span><br></pre></td></tr></table></figure>
<h3 id="2、进入安全模式"><strong>2、进入安全模式</strong></h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /usr/local/mysql/bin/mysqld_safe --skip-grant-tables</span><br></pre></td></tr></table></figure>
<h3 id="3、进入MySql"><strong>3、进入MySql</strong></h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /usr/local/mysql/bin/mysql -u root</span><br></pre></td></tr></table></figure>
<p>终端运行后将出现 <code>mysql&gt;</code> ，这时候输入：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ use mysql</span><br></pre></td></tr></table></figure>
<h3 id="4、最后输入，即完成密码重置"><strong>4、最后输入，即完成密码重置</strong></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ALTER USER 'root'@'localhost' IDENTIFIED BY '你的密码','root'@'localhost' PASSWORD EXPIRE NEVER;</span><br><span class="line">$ flush privileges</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote><p>最近升级了系统了也随带升级了 <code>MySql</code> ，在安装时好像有提示<strong>临时密码</strong>，但很不幸我把它忘记了只能重设了。把它写成 <code>Blog</code> 当作笔记方便以后查找也可以给需要的人。<]]>
    </summary>
    
      <category term="Mac" scheme="http://www.crazysurfboy.com/tags/Mac/"/>
    
      <category term="MySql" scheme="http://www.crazysurfboy.com/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个可以完全自定义的 UISwitch]]></title>
    <link href="http://www.crazysurfboy.com/2016/10/13/CSSwitch/"/>
    <id>http://www.crazysurfboy.com/2016/10/13/CSSwitch/</id>
    <published>2016-10-12T16:00:00.000Z</published>
    <updated>2016-10-14T09:36:37.000Z</updated>
    <content type="html"><![CDATA[<blockquote><p>我写的 <code>CSSwitch</code> 继承于 <code>UIControl</code> 是一个高度自定义的组件。它没有过多的花俏的东西很实在也很符合项目的需求。</p>
</blockquote>
<p>在看到现有的 <code>UISwitch</code> 不能满足产品需求的时候相信很多人第一时间去找第三方开源组件，我也一样找到了一个 <a href="https://github.com/JunichiT/JTMaterialSwitch" target="_blank" rel="external">（JTMaterialSwitch）</a>看上去不错的样子。</p>
<p>习惯性的看它的文档和源码发现它提供了很多的自定义接口和带有阴影的效果，但我只需要一个到二个默认的配置就好并且希望使用 <code>Block</code>进行回调与不是 <code>Delegate</code>。在思考了一会之后我决定阅读它的源码并参考它重新写一个简易版，因为的确实现起来不难。</p>
<p>效果如下<a href="https://github.com/CrazySurfBoy/CSSwitch" target="_blank" rel="external">（完整的示例下载）</a>：</p>
<p><img src="/image/CSSwitch.gif" alt="演示"></p>
<h3 id="1、调用"><strong>1、调用</strong></h3><p>调用的方法非常简单，下面是默认的配置样式的 <code>Switch</code>。</p>
<p><strong>创建代码</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建</span></span><br><span class="line"><span class="built_in">CGRect</span> screenFrame = [[<span class="built_in">UIScreen</span> mainScreen] bounds];</span><br><span class="line">CSSwitch *csSwitch = [[CSSwitch alloc] init];</span><br><span class="line">csSwitch<span class="variable">.center</span> = <span class="built_in">CGPointMake</span>(screenFrame<span class="variable">.size</span><span class="variable">.width</span> - <span class="number">140</span>, <span class="number">37</span>);</span><br><span class="line">[<span class="keyword">self</span><span class="variable">.view</span> addSubview:csSwitch];</span><br><span class="line"></span><br><span class="line">csSwitch<span class="variable">.switchStateChangedBlock</span> = ^(CSSwitchState switchState) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"CSSwitchState:%ld"</span>, switchState);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>那么我如何定义大小和样式呢?一个好的编码风格，就是大家看头文件定义就能知道使用方法：</p>
<p><strong>CSSwitch.h</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  CSSwitch.h</span></span><br><span class="line"><span class="comment">//  PairDaysMatter</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by SurfBoy on 01/10/2016.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016 CrazySurfboy. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, CSSwitchState) &#123;</span><br><span class="line"></span><br><span class="line">    CSSwitchStateOn,</span><br><span class="line">    CSSwitchStateOff</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 大小</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, CSSwitchSize) &#123;</span><br><span class="line">    </span><br><span class="line">    CSSwitchSizeBig,</span><br><span class="line">    CSSwitchSizeNormal,</span><br><span class="line">    CSSwitchSizeSmall</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 样式</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, CSSwitchStyle) &#123;</span><br><span class="line">    </span><br><span class="line">    CSSwitchStyleLight,</span><br><span class="line">    CSSwitchStyleDark,</span><br><span class="line">    CSSwitchStyleDefault</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@class</span> <span class="title">CSSwitch</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^CSSwitchStateChangedBlock)(CSSwitchState switchState);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CSSwitch</span> : <span class="title">UIControl</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) CSSwitchStateChangedBlock switchStateChangedBlock; <span class="comment">// 值更改变化 Blcok</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  初始化并默认设置 (CSSwitchSizeNormal，CSSwitchStyleDefault，CSSwitchStateOn)</span><br><span class="line"> *  </span><br><span class="line"> *  @return instancetype</span><br><span class="line"> */</span></span><br><span class="line">- (instancetype)init;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  初始化</span><br><span class="line"> *</span><br><span class="line"> *  @param CSSwitchSize</span><br><span class="line"> *  @param CSSwitchState</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line">- (instancetype)initWithSize:(CSSwitchSize)size state:(CSSwitchState)state;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  初始化</span><br><span class="line"> *</span><br><span class="line"> *  @param CSSwitchSize</span><br><span class="line"> *  @param CSSwitchStyle</span><br><span class="line"> *  @param CSSwitchState</span><br><span class="line"> */</span></span><br><span class="line">- (instancetype)initWithSize:(CSSwitchSize)size style:(CSSwitchStyle)style state:(CSSwitchState)state;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  设置打开与关闭</span><br><span class="line"> *</span><br><span class="line"> *  @param 是否打开</span><br><span class="line"> *  @param 是否需要动画效果</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setOn:(<span class="built_in">BOOL</span>)on animated:(<span class="built_in">BOOL</span>)animated;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h3 id="2、在哪里定义的大小和样式"><strong>2、在哪里定义的大小和样式</strong></h3><p>打开 <code>CSSwitch.m</code> 首先看看定义大小方法默认提供三个大小方案。这对我的项目需求足够了，而且不够增加也相当方便。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">- (instancetype)initWithSize:(CSSwitchSize)size style:(CSSwitchStyle)style state:(CSSwitchState)state &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置相对应的大小</span></span><br><span class="line"><span class="keyword">switch</span> (size) &#123;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">case</span> CSSwitchSizeBig:</span><br><span class="line">        frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.trackThickness</span> = <span class="number">23.0</span>;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.thumbSize</span> = <span class="number">31.0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">case</span> CSSwitchSizeNormal:</span><br><span class="line">        frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.trackThickness</span> = <span class="number">17.0</span>;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.thumbSize</span> = <span class="number">24.0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">case</span> CSSwitchSizeSmall:</span><br><span class="line">        frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">25</span>);</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.trackThickness</span> = <span class="number">13.0</span>;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.thumbSize</span> = <span class="number">18.0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.trackThickness</span> = <span class="number">13.0</span>;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.thumbSize</span> = <span class="number">20.0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>定义样式的部分，同样提供三个样式选择。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置默认样式</span></span><br><span class="line">- (<span class="keyword">void</span>)switchStyle:(CSSwitchStyle)style &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">switch</span> (style) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> CSSwitchStyleLight:</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> CSSwitchStyleDark:</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">self</span><span class="variable">.thumbOnTintColor</span>  = <span class="built_in">UIColorFromHex</span>(<span class="number">0x50D2C2</span>);</span><br><span class="line">            <span class="keyword">self</span><span class="variable">.thumbOffTintColor</span> = <span class="built_in">UIColorFromHex</span>(<span class="number">0xBEBEC1</span>);</span><br><span class="line">            <span class="keyword">self</span><span class="variable">.trackOnTintColor</span> = <span class="built_in">UIColorFromHexAlpha</span>(<span class="number">0x50D2C2</span>, <span class="number">0.5</span>);</span><br><span class="line">            <span class="keyword">self</span><span class="variable">.trackOffTintColor</span> = <span class="built_in">UIColorFromHexAlpha</span>(<span class="number">0x261D21</span>, <span class="number">0.1</span>);</span><br><span class="line">            <span class="keyword">self</span><span class="variable">.thumbDisabledTintColor</span> = <span class="built_in">UIColorFromHex</span>(<span class="number">0x50D2C2</span>);</span><br><span class="line">            <span class="keyword">self</span><span class="variable">.trackDisabledTintColor</span> = <span class="built_in">UIColorFromHex</span>(<span class="number">0x50D2C2</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="结语"><strong>结语</strong></h3><p>分析源码让我获益良多，编写的组件也能满足日后产品多数的需求使之成为我自己的东西。维护自己的代码还是有底的改动也比较快，编写组件时思考以后会分享出去的想法，会让你组件更加的完善。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote><p>我写的 <code>CSSwitch</code> 继承于 <code>UIControl</code> 是一个高度自定义的组件。它没有过多的花俏的东西很实在也很符合项目的需求。</p>
</blockquote>
<p>在看到现有的 <code>UISwitch</code> 不能满足产品需求的时候相信很多人第一时间去找第三方开源组件，我也一样找到了一个 <a href="https://github.com/JunichiT/JTMaterialSwitch">（JTMaterialSwitch）</a>看上去不错的样子。</p>
<p>习惯性的看它的文档和源码发现它提供了很多的自定义接口和带有阴影的效果，但我只需要一个到二个默认的配置就好并且希望使用 <code>Block</code>进行回调与不是 <code>Delegate</code>。在思考了一会之后我决定阅读它的源码并参考它重新写一个简易版，因为的确实现起来不难。</p>
<p>效果如下<a href="https://github.com/CrazySurfBoy/CSSwitch">（完整的示例下载）</a>：</p>
<p><img src="/image/CSSwitch.gif" alt="演示"></p>
<h3 id="1、调用"><strong>1、调用</strong></h3><p>调用的方法非常简单，下面是默认的配置样式的 <code>Switch</code>。</p>
<p><strong>创建代码</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建</span></span><br><span class="line"><span class="built_in">CGRect</span> screenFrame = [[<span class="built_in">UIScreen</span> mainScreen] bounds];</span><br><span class="line">CSSwitch *csSwitch = [[CSSwitch alloc] init];</span><br><span class="line">csSwitch<span class="variable">.center</span> = <span class="built_in">CGPointMake</span>(screenFrame<span class="variable">.size</span><span class="variable">.width</span> - <span class="number">140</span>, <span class="number">37</span>);</span><br><span class="line">[<span class="keyword">self</span><span class="variable">.view</span> addSubview:csSwitch];</span><br><span class="line"></span><br><span class="line">csSwitch<span class="variable">.switchStateChangedBlock</span> = ^(CSSwitchState switchState) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"CSSwitchState:%ld"</span>, switchState);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="UISwitch" scheme="http://www.crazysurfboy.com/tags/UISwitch/"/>
    
      <category term="iOS" scheme="http://www.crazysurfboy.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSProgressButton 带进度状态的按扭]]></title>
    <link href="http://www.crazysurfboy.com/2016/10/05/CSProgressButton/"/>
    <id>http://www.crazysurfboy.com/2016/10/05/CSProgressButton/</id>
    <published>2016-10-04T16:00:00.000Z</published>
    <updated>2016-10-14T09:36:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote><p>点击按扭出现旋转的加载动画，触发后图标状态发生变化。</p>
</blockquote>
<p>最近写的一个通用组件，不怎么好描述看效果图吧。需求就是点击按扭发送一个<strong>请求</strong>到服务器时出现进度旋转，当<strong>请求</strong>成功后打个勾不成功恢复原来的状态。</p>
<p>效果如下<a href="https://github.com/CrazySurfBoy/CSProgressButton" target="_blank" rel="external">（完整的示例下载）</a>：</p>
<p><img src="/image/CSProgressButtong.gif" alt="演示"></p>
<h3 id="1、调用"><strong>1、调用</strong></h3><p>使用 <code>Block</code> 都知道很容易造成循环引用，由于我自己的项目是使用 <code>reactivecocoa</code> 所以我能直接使用 <code>@weakify(self);</code>, <code>@strongify(self);</code> 来打破循环引用。至于其它方法 <code>Google</code> 有很多，这里就不加进来了。</p>
<p><strong>ViewController.m</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.m</span></span><br><span class="line"><span class="comment">//  CSProgressButton</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by SurfBoy on 11/10/2016.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016 CrazySurfboy. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"ViewController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"CSProgressButton.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define SCREEN_HEIGHT [UIScreen mainScreen].bounds.size.height</span></span><br><span class="line"><span class="preprocessor">#define SCREEN_WDITH [UIScreen mainScreen].bounds.size.width</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</span><br><span class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</span><br><span class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.title</span> = <span class="string">@"Demo"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Add</span></span><br><span class="line">    CSProgressButton *progressButton = [[CSProgressButton alloc] initWithFrame:<span class="built_in">CGRectMake</span>(SCREEN_WDITH/<span class="number">2</span>-<span class="number">25</span>, <span class="number">100.0</span>f, <span class="number">25.0</span>f, <span class="number">25.0</span>f)];</span><br><span class="line">    progressButton<span class="variable">.startButtonImage</span> = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"subscribed_add_blue_button_icon"</span>];</span><br><span class="line">    progressButton<span class="variable">.endButtonImage</span> = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"subscribed_button_icon"</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:progressButton];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开始</span></span><br><span class="line">    <span class="comment">// @weakify(self);</span></span><br><span class="line">    progressButton<span class="variable">.startButtonDidTapBlock</span> = ^(CSProgressButton *progressButton) &#123;</span><br><span class="line">        <span class="comment">// @strongify(self);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2秒</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"startButtonDidTapBlock"</span>);</span><br><span class="line">        [<span class="keyword">self</span> progressButtonClick:progressButton];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结束</span></span><br><span class="line">    progressButton<span class="variable">.endButtonDidTapBlock</span> = ^(CSProgressButton *progressButton) &#123;</span><br><span class="line">            </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"endButtonDidTapBlock"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击事件</span></span><br><span class="line">- (<span class="keyword">void</span>)progressButtonClick:(CSProgressButton *)progressButton &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 两秒后执行</span></span><br><span class="line">    <span class="keyword">double</span> delayInSeconds = <span class="number">2.0</span>;</span><br><span class="line">    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * <span class="built_in">NSEC_PER_SEC</span>));</span><br><span class="line">    dispatch_after(popTime, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        </span><br><span class="line">        [progressButton endProgress];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>可以看到回调都是吧 <code>Block</code> 为主非常的方便。设计它的场景主要是在订阅列表，直接点击就可以订阅。如下图:<br><a id="more"></a><br><img src="/image/csprogress_button_list.png" alt="演示"></p>
<h3 id="2、源码"><strong>2、源码</strong></h3><p>因为本人很习惯的给自己代码加代码注释，所以对于想要修改这个源码也是相当的简单。</p>
<p><strong>CSProgressButton.h</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  CSProgressButton.h</span></span><br><span class="line"><span class="comment">//  CSProgressButton</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by SurfBoy on 11/10/2016.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016 CrazySurfboy. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@class</span> <span class="title">CSProgressButton</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^CSProgressButtonBlockAction)(CSProgressButton *progressButton);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CSProgressButton</span> : <span class="title">UIView</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIImage</span> *startButtonImage;  <span class="comment">// 开始的图片</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIImage</span> *endButtonImage;  <span class="comment">// 结束的图片</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) CSProgressButtonBlockAction startButtonDidTapBlock; <span class="comment">// 开始 Block</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) CSProgressButtonBlockAction endButtonDidTapBlock;  <span class="comment">// 结束 Block</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  结束进度</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)endProgress;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  重新设置</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)reset;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  开始动画</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)startProgress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p><strong>CSProgressButton.m</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  CSProgressButton.m</span></span><br><span class="line"><span class="comment">//  CSProgressButton</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by SurfBoy on 11/10/2016.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016 CrazySurfboy. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"CSProgressButton.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, CSProgressButtonState) &#123;</span><br><span class="line"></span><br><span class="line">    CSProgressButtonStateUnstarted,</span><br><span class="line">    CSProgressButtonStateProgressing,</span><br><span class="line">    CSProgressButtonStateFinished</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CSProgressButton</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIImageView</span> *buttonImageView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) CSProgressButtonState state;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIImageView</span> *animateImageView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CSProgressButton</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> commonInit];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)commonInit &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  转动的图片</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.animateImageView</span> = [[<span class="built_in">UIImageView</span> alloc] initWithImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"loading-circle.png"</span>]];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.animateImageView</span><span class="variable">.hidden</span> = <span class="literal">YES</span>;</span><br><span class="line">    [<span class="keyword">self</span> addSubview:<span class="keyword">self</span><span class="variable">.animateImageView</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认状态</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.state</span> = CSProgressButtonStateUnstarted;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加事件</span></span><br><span class="line">    [<span class="keyword">self</span> addGestureRecognizer:[[<span class="built_in">UITapGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(progressButtonWasTapped:)]];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.buttonImageView</span> = [<span class="built_in">UIImageView</span> new];</span><br><span class="line">    [<span class="keyword">self</span> addSubview:<span class="keyword">self</span><span class="variable">.buttonImageView</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置开始的图片</span></span><br><span class="line">- (<span class="keyword">void</span>)setStartButtonImage:(<span class="built_in">UIImage</span> *)startButtonImage &#123;</span><br><span class="line"></span><br><span class="line">    _startButtonImage = startButtonImage;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.state</span> == CSProgressButtonStateUnstarted) &#123;</span><br><span class="line">        [<span class="keyword">self</span> updateButtonImageForState:<span class="keyword">self</span><span class="variable">.state</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置结束的图片</span></span><br><span class="line">- (<span class="keyword">void</span>)setEndButtonImage:(<span class="built_in">UIImage</span> *)endButtonImage &#123;</span><br><span class="line"></span><br><span class="line">    _endButtonImage = endButtonImage;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.state</span> == CSProgressButtonStateFinished) &#123;</span><br><span class="line">        [<span class="keyword">self</span> updateButtonImageForState:<span class="keyword">self</span><span class="variable">.state</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据状态更新按扭</span></span><br><span class="line">- (<span class="keyword">void</span>)updateButtonImageForState:(CSProgressButtonState)state &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.buttonImageView</span><span class="variable">.image</span> = [<span class="keyword">self</span> imageForState:state];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.buttonImageView</span><span class="variable">.frame</span> = (<span class="built_in">CGRect</span>) &#123; <span class="built_in">CGPointZero</span>, <span class="keyword">self</span><span class="variable">.buttonImageView</span><span class="variable">.image</span><span class="variable">.size</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态图片</span></span><br><span class="line">- (<span class="built_in">UIImage</span> *)imageForState:(CSProgressButtonState)state &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIImage</span> *image = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (state == CSProgressButtonStateUnstarted) &#123;</span><br><span class="line">        image = <span class="keyword">self</span><span class="variable">.startButtonImage</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (state == CSProgressButtonStateFinished) &#123;</span><br><span class="line">        image = <span class="keyword">self</span><span class="variable">.endButtonImage</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新设置</span></span><br><span class="line">- (<span class="keyword">void</span>)reset &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.state</span> = CSProgressButtonStateUnstarted;</span><br><span class="line">    [<span class="keyword">self</span> stopAnimating];</span><br><span class="line">    [<span class="keyword">self</span> updateButtonImageForState:<span class="keyword">self</span><span class="variable">.state</span>];</span><br><span class="line"></span><br><span class="line">    [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.2</span> animations:^&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.buttonImageView</span><span class="variable">.alpha</span> = <span class="number">1.0</span>f;</span><br><span class="line">    &#125; </span><br><span class="line">    completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - Actions</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击</span></span><br><span class="line">- (<span class="keyword">void</span>)progressButtonWasTapped:(<span class="built_in">UIGestureRecognizer</span> *)gestureRecognizer &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.state</span> == CSProgressButtonStateUnstarted) &#123;</span><br><span class="line"></span><br><span class="line">        [<span class="keyword">self</span> startProgress];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.startButtonDidTapBlock</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">self</span><span class="variable">.startButtonDidTapBlock</span>(<span class="keyword">self</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结束</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.state</span> == CSProgressButtonStateFinished) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.endButtonDidTapBlock</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span><span class="variable">.endButtonDidTapBlock</span>(<span class="keyword">self</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始动画</span></span><br><span class="line">- (<span class="keyword">void</span>)startProgress &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.state</span> = CSProgressButtonStateProgressing;</span><br><span class="line">    [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.2</span> animations:^&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.buttonImageView</span><span class="variable">.alpha</span> = <span class="number">0.0</span>f;        </span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> startAnimating];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束动画</span></span><br><span class="line">- (<span class="keyword">void</span>)endProgressWithState:(CSProgressButtonState)state &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Block</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.endButtonDidTapBlock</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span><span class="variable">.endButtonDidTapBlock</span>(<span class="keyword">self</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.state</span> = CSProgressButtonStateUnstarted;</span><br><span class="line">    [<span class="keyword">self</span> updateButtonImageForState:CSProgressButtonStateFinished];</span><br><span class="line">    [<span class="keyword">self</span> stopAnimating];</span><br><span class="line"></span><br><span class="line">    [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.2</span> animations:^&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.buttonImageView</span><span class="variable">.alpha</span> = <span class="number">1.0</span>f;</span><br><span class="line">    &#125; </span><br><span class="line">    completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束进度</span></span><br><span class="line">- (<span class="keyword">void</span>)endProgress &#123;</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> endProgressWithState:CSProgressButtonStateFinished];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - Animation</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)startAnimating &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否已经常见过动画，如果已经创建则不再创建动画</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.animateImageView</span><span class="variable">.hidden</span> = <span class="literal">NO</span>;</span><br><span class="line">    <span class="built_in">CAAnimation</span> *exiestAnimation = [<span class="keyword">self</span><span class="variable">.animateImageView</span><span class="variable">.layer</span> animationForKey:<span class="string">@"rotate"</span>];</span><br><span class="line">    <span class="keyword">if</span> (exiestAnimation) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置动画让它旋转起来</span></span><br><span class="line">    <span class="built_in">CABasicAnimation</span> *animation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"transform.rotation.z"</span>];</span><br><span class="line">    animation<span class="variable">.fromValue</span> = @<span class="number">0</span>;</span><br><span class="line">    animation<span class="variable">.toValue</span> = @(<span class="number">2</span>*M_PI);</span><br><span class="line">    animation<span class="variable">.repeatCount</span> = HUGE_VALF;</span><br><span class="line">    animation<span class="variable">.duration</span> = <span class="number">1.0</span>f;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.animateImageView</span><span class="variable">.layer</span> addAnimation:animation forKey:<span class="string">@"rotate"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止动画</span></span><br><span class="line">- (<span class="keyword">void</span>)stopAnimating &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.animateImageView</span><span class="variable">.hidden</span> = <span class="literal">YES</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.animateImageView</span><span class="variable">.layer</span> removeAllAnimations];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h3 id="总结"><strong>总结</strong></h3><p>相对于以前喜欢使用很多的开源组件，慢慢发现他们往往不易修改或者有很多自己不需要的功能。对开源组件的源码进行查看学习，然后写出一个符合自己的组件好像是不错的选择。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote><p>点击按扭出现旋转的加载动画，触发后图标状态发生变化。</p>
</blockquote>
<p>最近写的一个通用组件，不怎么好描述看效果图吧。需求就是点击按扭发送一个<strong>请求</strong>到服务器时出现进度旋转，当<strong>请求</strong>成功后打个勾不成功恢复原来的状态。</p>
<p>效果如下<a href="https://github.com/CrazySurfBoy/CSProgressButton">（完整的示例下载）</a>：</p>
<p><img src="/image/CSProgressButtong.gif" alt="演示"></p>
<h3 id="1、调用"><strong>1、调用</strong></h3><p>使用 <code>Block</code> 都知道很容易造成循环引用，由于我自己的项目是使用 <code>reactivecocoa</code> 所以我能直接使用 <code>@weakify(self);</code>, <code>@strongify(self);</code> 来打破循环引用。至于其它方法 <code>Google</code> 有很多，这里就不加进来了。</p>
<p><strong>ViewController.m</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.m</span></span><br><span class="line"><span class="comment">//  CSProgressButton</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by SurfBoy on 11/10/2016.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016 CrazySurfboy. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"ViewController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"CSProgressButton.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define SCREEN_HEIGHT [UIScreen mainScreen].bounds.size.height</span></span><br><span class="line"><span class="preprocessor">#define SCREEN_WDITH [UIScreen mainScreen].bounds.size.width</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</span><br><span class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</span><br><span class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.title</span> = <span class="string">@"Demo"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Add</span></span><br><span class="line">    CSProgressButton *progressButton = [[CSProgressButton alloc] initWithFrame:<span class="built_in">CGRectMake</span>(SCREEN_WDITH/<span class="number">2</span>-<span class="number">25</span>, <span class="number">100.0</span>f, <span class="number">25.0</span>f, <span class="number">25.0</span>f)];</span><br><span class="line">    progressButton<span class="variable">.startButtonImage</span> = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"subscribed_add_blue_button_icon"</span>];</span><br><span class="line">    progressButton<span class="variable">.endButtonImage</span> = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"subscribed_button_icon"</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:progressButton];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开始</span></span><br><span class="line">    <span class="comment">// @weakify(self);</span></span><br><span class="line">    progressButton<span class="variable">.startButtonDidTapBlock</span> = ^(CSProgressButton *progressButton) &#123;</span><br><span class="line">        <span class="comment">// @strongify(self);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2秒</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"startButtonDidTapBlock"</span>);</span><br><span class="line">        [<span class="keyword">self</span> progressButtonClick:progressButton];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结束</span></span><br><span class="line">    progressButton<span class="variable">.endButtonDidTapBlock</span> = ^(CSProgressButton *progressButton) &#123;</span><br><span class="line">            </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"endButtonDidTapBlock"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击事件</span></span><br><span class="line">- (<span class="keyword">void</span>)progressButtonClick:(CSProgressButton *)progressButton &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 两秒后执行</span></span><br><span class="line">    <span class="keyword">double</span> delayInSeconds = <span class="number">2.0</span>;</span><br><span class="line">    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * <span class="built_in">NSEC_PER_SEC</span>));</span><br><span class="line">    dispatch_after(popTime, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        </span><br><span class="line">        [progressButton endProgress];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>可以看到回调都是吧 <code>Block</code> 为主非常的方便。设计它的场景主要是在订阅列表，直接点击就可以订阅。如下图:<br>]]>
    
    </summary>
    
      <category term="CSProgressButton" scheme="http://www.crazysurfboy.com/tags/CSProgressButton/"/>
    
      <category term="iOS" scheme="http://www.crazysurfboy.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MVVM 模式下iOS项目架构基本说明]]></title>
    <link href="http://www.crazysurfboy.com/2016/10/01/MVVM/"/>
    <id>http://www.crazysurfboy.com/2016/10/01/MVVM/</id>
    <published>2016-09-30T16:00:00.000Z</published>
    <updated>2016-10-14T09:36:53.000Z</updated>
    <content type="html"><![CDATA[<blockquote><p>虽然开发了<code>iOS</code>有些年，但项目基本设计模式还是最常见的 <code>MVC</code> （模型，视图，控制器）。但最近在工作中接触到 <code>MVVM</code> 的设计模式，至于它比 <code>MVC</code> 的优越性在哪里呢？下面慢慢的说明</p>
</blockquote>
<h3 id="1、MVVM_模式介绍"><strong>1、MVVM 模式介绍</strong></h3><p><strong>(由于MVVM 模式介绍基本都一样，我摘录了一段)</strong><br><code>MVVM</code> 是 <code>Model-View-View Model</code> 的缩写，<code>MVVM</code> 听起来好像很复杂的样子，但它本质上就是 <code>MVC</code> 的改进版。<code>MVVM</code> 就是将其中的 <code>View</code>的状态和行为抽象化，让我们将视图 <code>UI</code> 和业务逻辑分开。当然这些事 <code>ViewModel</code> 已经帮我们做了，它可以取出 <code>Model</code> 的数据同时帮忙处理 <code>View</code>中由于需要展示内容而涉及的业务逻辑。在 <code>iOS</code> 中使用 MVVM 可以将 <code>ViewController</code> 中处理 <code>Mode</code> 的业务逻辑全部交由 <code>ViewModel</code>，让 <code>ViewController</code> 不再显的特别臃肿。</p>
<p><strong>MVVM 模式是通过下面三个核心组件组成，每个都有它自己所要处理的事情：</strong></p>
<ul>
<li><p><code>Model</code> -数据模型</p>
</li>
<li><p><code>View</code> – 用来将 <code>Model</code> 的内容显示出来</p>
</li>
<li><p><code>ViewModel</code> - 扮演 <code>View</code>和 <code>Model</code> 之间的使者，帮忙处理 <code>View</code> 的业务逻辑</p>
</li>
</ul>
<p>如图:</p>
<p><img src="/image/mvvm.png" alt="演示"> </p>
<p><strong>那么MVVM 模式有什优点呢？</strong></p>
<ol>
<li><p>低耦合。视图（<code>View</code>）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的 <code>View</code>上，当 <code>View</code>变化的时候 <code>Model</code> 可以不变，当 <code>Model</code> 变化的时候 <code>View</code> 也可以不变。</p>
</li>
<li><p>可重用性。你可以把一些视图逻辑放在一个 <code>ViewModel</code> 里面，让很多 <code>view</code> 重用这段视图逻辑。</p>
</li>
<li><p>独立开发。开发人员可以专注于业务逻辑和数据的开发（<code>ViewModel</code>），设计人员可以专注于页面设计。</p>
</li>
<li><p>可测试。界面素来是比较难于测试的，而使用 <code>MVVM</code> 的一大好处是我们可以很容易对 <code>ViewModel</code> 进行单元测试</p>
</li>
</ol>
<h3 id="2、基本目录结构"><strong>2、基本目录结构</strong></h3><p>这个目录架构是参考很多篇对于 <code>MVVM</code> 介绍的文章以及结合我工作中实际情况所列的目录架构。目录多数基于 <code>Group</code> 来建立，所在可以随时跟着项目的迭代而进行改变。同时也减少文名重命名的情况也方便文件的查找。</p>
<p><strong>如图:</strong></p>
<p><img src="/image/mvvm_xcode.png" alt="演示"> </p>
<h3 id="Resource"><strong>Resource</strong></h3><p>存放资源文件，目录里面的都是实体的文件夹</p>
<p><img src="/image/mvvm_resource.png" alt="演示"></p>
<a id="more"></a>
<h3 id="Data"><strong>Data</strong></h3><p>主要放数据处理文件，例如图中的 <code>PDMDatabase</code> 它实际是使用第三方开源组件 <code>FMDB</code> 对 <code>Sqlite</code> 封装的文件。那为为什么会有 <code>PDM</code> 前缀呢？其实这些基类我都会加项目的头字母简称，避免也第三方库冲突重名，虽然机率不同但加无防。</p>
<p><img src="/image/mvvm_data.png" alt="演示"> </p>
<h3 id="Vendors"><strong>Vendors</strong></h3><p>存放第三方开源的组件，项目不是有 <code>Pod</code> 管理开源组件，那为什么还要单独设一项呢？因为有时候我们会用到已经不更新、对其大量修改等原因，单独设一项还是很有必要的。</p>
<p><img src="/image/mvvm_vendors.png" alt="演示"> </p>
<h3 id="Define"><strong>Define</strong></h3><p>定义宏，建议不要将所有的定义都写到一个文件，按功能分类这样会更加的清楚。</p>
<p><img src="/image/mvvm_define.png" alt="演示"></p>
<h3 id="Util"><strong>Util</strong></h3><p>用于存放我们定义的分类和扩展或者工具类。建议能少用 <code>Common</code> 就少用，<code>Common</code> 除了会导致越来越多代码冗余，也让人难以从表面看出里面是什么内容。</p>
<p><img src="/image/mvvm_util.png" alt="演示"></p>
<p>例如验证邮箱:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"VerifyUtil.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">VerifyUtil</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证邮箱格式</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)email:(<span class="built_in">NSString</span> *)emailText &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *regex = <span class="string">@"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]&#123;2,4&#125;"</span>;</span><br><span class="line">    <span class="built_in">NSPredicate</span> *redicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF MATCHES %@"</span>, regex];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [redicate evaluateWithObject:emailText];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h3 id="Common"><strong>Common</strong></h3><p>这里存放的是通用的组件类，比如说我写了轻量级的 <code>PDMProgressHUD</code> 加载动画组件、<code>PDMSwitch</code> 开关组件类似于 <code>UISwitch</code> ，只是基于 <code>UIControl</code> 进行编写的说白了就是完全自定义。这些都是 <code>APP</code> 都会用到的，往后也会把代码分享出来。</p>
<p><img src="/image/mvvm_common.png" alt="演示"></p>
<h3 id="Services"><strong>Services</strong></h3><p>服务类，例如图中的 <code>UserManager</code> 它实际是一个单例负责管理用户信息保存、清除用户信息、更新等操作。</p>
<p><img src="/image/mvvm_services.png" alt="演示"> </p>
<h3 id="Request"><strong>Request</strong></h3><p>网络请求类，比如头文件请求信息、验证相关的都在这里。<code>Request</code> 基于现在很多人使用的 <code>AFNetworking</code> 封装，有机会同样分享出来。</p>
<p><img src="/image/mvvm_request.png" alt="演示"> </p>
<p>请求代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册</span></span><br><span class="line">- (<span class="keyword">void</span>)signUpWithParam:(<span class="built_in">NSDictionary</span> *)param Handler:(PDMRequestCompletionBlock)handler &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *tParameter = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    tParameter[<span class="string">@"api"</span>] = <span class="string">@"my_days.user.sign_up"</span>;</span><br><span class="line">    [tParameter addEntriesFromDictionary:param];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// post 实际是传 urlString，大多数公司是要的</span></span><br><span class="line">    <span class="comment">// 只是本人早期写的 PHP API 接口地址是统一的</span></span><br><span class="line">    <span class="comment">// http://www.xxxx.com/api/index.php?api=xxxx&amp;sign=xxxxx...</span></span><br><span class="line">    [PDMRequest post:<span class="literal">nil</span> parameters:tParameter success:^(PDMBaseRequest *request) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证</span></span><br><span class="line">        <span class="built_in">BOOL</span> isSuccess =  [RequestUtil isSuccess:request];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 成功</span></span><br><span class="line">        <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 成功</span></span><br><span class="line">            handler(request, <span class="literal">YES</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            </span><br><span class="line">             handler(request, <span class="literal">NO</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    failure:^(PDMBaseRequest *request) &#123;</span><br><span class="line"></span><br><span class="line">        handler(request, <span class="literal">NO</span>);</span><br><span class="line"></span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Model"><strong>Model</strong></h3><p>用于存放模型类（数据模型）</p>
<p><img src="/image/mvvm_model.png" alt="演示"></p>
<p>听起来有点抽像？看例子就简单多了</p>
<p><strong>UserModel.h</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"PDMBaseModel.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, GenderType) &#123;</span><br><span class="line">    GenderMale,</span><br><span class="line">    GenderFemale,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UserModel</span> : <span class="title">PDMBaseModel</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> uid; <span class="comment">// 用户id</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *email; <span class="comment">// 邮箱</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *nickname; <span class="comment">// 昵称</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) GenderType gender; <span class="comment">// 性别</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> birthday; <span class="comment">// 生日</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *user_icon; <span class="comment">// 用户头像</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *device_token; <span class="comment">// 推送的 device_token</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p><code>model</code> 类要继承 <code>PDMBaseModel</code></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;Mantle/Mantle.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PDMBaseModel</span> : <span class="title">MTLModel</span> &lt;<span class="title">MTLJSONSerializing</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  序列化</span><br><span class="line"> *  </span><br><span class="line"> *  @return 是否成功</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)archive;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  反序列化</span><br><span class="line"> *  </span><br><span class="line"> *  @return PDMBaseModel</span><br><span class="line"> */</span></span><br><span class="line">+ (instancetype)unarchive;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  删除序列化文件</span><br><span class="line"> *  </span><br><span class="line"> *  @return 是否成功</span><br><span class="line"> */</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)removeArchive;</span><br></pre></td></tr></table></figure>
<p><strong>Mantle 介绍</strong></p>
<p> <code>Mantle</code> 是一个 <code>iOS</code> 模型框架，它为对象和 <code>JSON</code> 之间的相互转化提供了一种简便的方法。这在处理网络数据的时候非常有用。 <code>MTLModel</code> 提供一个简便的方法在 <code>NSDictionary</code> 对象和自定义对象之间建立映射关系。</p>
<h3 id="ViewModel"><strong>ViewModel</strong></h3><p><code>MVVM</code> 的核心、解耦合、逻辑、数据处理等</p>
<p><img src="/image/mvvm_view_model.png" alt="演示"></p>
<h3 id="ViewController"><strong>ViewController</strong></h3><p>用于存放视图控制器类</p>
<p><img src="/image/mvvm_view_controller.png" alt="演示"></p>
<h3 id="总结"><strong>总结</strong></h3><p>在我看来一个合理的项目目录结构会让人清楚这些目录的作用，也能清晰理解这些目录内容是什么。当然每个人对目录结构的想法都不一样，关键还是要结合你实际的工作内容和经验去合理的规划。一个好的目录结构目的有以下几点</p>
<p>1、提高项目代码的复用率，减少重复的代码。</p>
<p>2、更加的合适一个团队的开发并能够有效的降低耦合，使得任务更容易划分和管理。</p>
<p>3、有利于团队者成员，对各功能进行相互学习。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote><p>虽然开发了<code>iOS</code>有些年，但项目基本设计模式还是最常见的 <code>MVC</code> （模型，视图，控制器）。但最近在工作中接触到 <code>MVVM</code> 的设计模式，至于它比 <code>MVC</code> 的优越性在哪里呢？下面慢慢的说明</p>
</blockquote>
<h3 id="1、MVVM_模式介绍"><strong>1、MVVM 模式介绍</strong></h3><p><strong>(由于MVVM 模式介绍基本都一样，我摘录了一段)</strong><br><code>MVVM</code> 是 <code>Model-View-View Model</code> 的缩写，<code>MVVM</code> 听起来好像很复杂的样子，但它本质上就是 <code>MVC</code> 的改进版。<code>MVVM</code> 就是将其中的 <code>View</code>的状态和行为抽象化，让我们将视图 <code>UI</code> 和业务逻辑分开。当然这些事 <code>ViewModel</code> 已经帮我们做了，它可以取出 <code>Model</code> 的数据同时帮忙处理 <code>View</code>中由于需要展示内容而涉及的业务逻辑。在 <code>iOS</code> 中使用 MVVM 可以将 <code>ViewController</code> 中处理 <code>Mode</code> 的业务逻辑全部交由 <code>ViewModel</code>，让 <code>ViewController</code> 不再显的特别臃肿。</p>
<p><strong>MVVM 模式是通过下面三个核心组件组成，每个都有它自己所要处理的事情：</strong></p>
<ul>
<li><p><code>Model</code> -数据模型</p>
</li>
<li><p><code>View</code> – 用来将 <code>Model</code> 的内容显示出来</p>
</li>
<li><p><code>ViewModel</code> - 扮演 <code>View</code>和 <code>Model</code> 之间的使者，帮忙处理 <code>View</code> 的业务逻辑</p>
</li>
</ul>
<p>如图:</p>
<p><img src="/image/mvvm.png" alt="演示"> </p>
<p><strong>那么MVVM 模式有什优点呢？</strong></p>
<ol>
<li><p>低耦合。视图（<code>View</code>）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的 <code>View</code>上，当 <code>View</code>变化的时候 <code>Model</code> 可以不变，当 <code>Model</code> 变化的时候 <code>View</code> 也可以不变。</p>
</li>
<li><p>可重用性。你可以把一些视图逻辑放在一个 <code>ViewModel</code> 里面，让很多 <code>view</code> 重用这段视图逻辑。</p>
</li>
<li><p>独立开发。开发人员可以专注于业务逻辑和数据的开发（<code>ViewModel</code>），设计人员可以专注于页面设计。</p>
</li>
<li><p>可测试。界面素来是比较难于测试的，而使用 <code>MVVM</code> 的一大好处是我们可以很容易对 <code>ViewModel</code> 进行单元测试</p>
</li>
</ol>
<h3 id="2、基本目录结构"><strong>2、基本目录结构</strong></h3><p>这个目录架构是参考很多篇对于 <code>MVVM</code> 介绍的文章以及结合我工作中实际情况所列的目录架构。目录多数基于 <code>Group</code> 来建立，所在可以随时跟着项目的迭代而进行改变。同时也减少文名重命名的情况也方便文件的查找。</p>
<p><strong>如图:</strong></p>
<p><img src="/image/mvvm_xcode.png" alt="演示"> </p>
<h3 id="Resource"><strong>Resource</strong></h3><p>存放资源文件，目录里面的都是实体的文件夹</p>
<p><img src="/image/mvvm_resource.png" alt="演示"></p>]]>
    
    </summary>
    
      <category term="MVVM" scheme="http://www.crazysurfboy.com/tags/MVVM/"/>
    
      <category term="iOS" scheme="http://www.crazysurfboy.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GPUImage - 颜色查找表(Color Lookup Table) 为图片添加滤镜]]></title>
    <link href="http://www.crazysurfboy.com/2016/04/11/GPUImageLookupTable/"/>
    <id>http://www.crazysurfboy.com/2016/04/11/GPUImageLookupTable/</id>
    <published>2016-04-10T16:00:00.000Z</published>
    <updated>2016-10-14T09:36:43.000Z</updated>
    <content type="html"><![CDATA[<blockquote><p>滤镜使用 <code>颜色查找表(Color Lookup Table)</code> 方法，对原图的颜色进行改变。就像 <code>PhotoShop</code>中的可选颜色功能，可以把某种的颜色进行改变，例如去掉图像中的黄色，仅对原图进行颜色的更改。</p>
</blockquote>
<p>近期公司的新 <code>App</code> 有图像编辑功能的需求，对我们来说是个新东西大家都没接触过。我查找了很多的资料和例子，最终确定下来使用 <code>颜色查找表(Color Lookup Table)</code> 方法是最合适不过的。因为程序员只要设置好相关代码，无论多少个滤镜效果都可以全部交给设计去做，而我呢只需要配置个文件就可以了。</p>
<p>方法找对了这事很重要！因为很多后续开发都与滤镜相关。</p>
<p>效果如下<a href="https://github.com/CrazySurfBoy/GPUImageLookupTable" target="_blank" rel="external">（完整的示例下载）</a>：</p>
<p><img src="/image/GPUImageLookupTable.gif" alt="演示"> </p>
<p>接下来的代码简单到你不相信，是的就是这么简单。</p>
<a id="more"></a>
<h3 id="1、Original_Lookup_Table"><strong>1、Original Lookup Table</strong></h3><p><img src="/image/OriginalLookupTable.png" alt="演示"><br><code>颜色查找表</code> 是将现有的颜色进行一次（矩阵）转换，而很多的滤镜功能就是提供了这么一个转换的矩阵，在原始色彩的基础上进行颜色的转换。</p>
<h3 id="2、使用_PhotoShop_对_Original_Lookup_Table_进行颜色的改变"><strong>2、使用 <code>PhotoShop</code> 对 <code>Original Lookup Table</code> 进行颜色的改变</strong></h3><p>很多码农对 <code>PhotoShop</code> 很陌生(我玩摄影懂一点)不过没关系，因为做法简单，直接告诉设计师都能懂。</p>
<ul>
<li><p><strong>1、从 <code>PhotoShop</code> 中打开一张想要调整色调的图（一般为比较中性的原图）。</strong></p>
</li>
<li><p><strong>2、打开 <code>PhotoShop</code> 动作面板，开始记下你的操作。</strong></p>
</li>
<li><p><strong>3、对原图进行色调的调整（这种方法只会对颜色起效）。</strong></p>
</li>
<li><p><strong>4、调整完后保存动作，并在动作面板删掉一些不是调整色调的其它操作。</strong></p>
</li>
<li><p><strong>5、打开 <code>Original Lookup Table</code> 的原图，并从动作面板中执行刚刚保存的动作</strong></p>
</li>
<li><p><strong>6、导出图片</strong></p>
</li>
</ul>
<p>为了更清楚的演示调色后的图，我特意调成了黑白。就是开头看到演示的 <code>GIF</code> 的效果。</p>
<p>(调整前)<br><img src="/image/OriginalLookupTable.png" alt="演示"> </p>
<p>(调整后)<br><img src="/image/BlackWhiteLookupTable.png" alt="演示"> </p>
<p>-</p>
<h3 id="3、在代码中使用_Lookup_Table_对图像执行滤镜效果"><strong>3、在代码中使用 Lookup Table 对图像执行滤镜效果</strong></h3><p>非常有名的第三方图像处理库 GPUImage 想必你一定听说过，如何安装使用网上文章有很多这里就不详说了。</p>
<p>– <strong>配置滤镜信息</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滤镜</span></span><br><span class="line">- (<span class="keyword">void</span>)initFilterView &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置信息</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.filterList</span> = [[<span class="built_in">NSMutableArray</span> alloc] init];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 滤镜数据</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> *filterData1 = @&#123;<span class="string">@"lookupImage"</span>:<span class="string">@"OriginalLookupTable.png"</span>, <span class="string">@"title"</span>:<span class="string">@"原图"</span>&#125;;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.filterList</span> addObject:filterData1];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSDictionary</span> *filterData2 = @&#123;<span class="string">@"lookupImage"</span>:<span class="string">@"LookupTable1.png"</span>, <span class="string">@"title"</span>:<span class="string">@"怀旧"</span>&#125;;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.filterList</span> addObject:filterData2];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSDictionary</span> *filterData3 = @&#123;<span class="string">@"lookupImage"</span>:<span class="string">@"LookupTable2.png"</span>, <span class="string">@"title"</span>:<span class="string">@"黑白"</span>&#125;;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.filterList</span> addObject:filterData3];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 滤镜区域</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.filterView</span> = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0.0</span>f, SCREEN_HEIGHT - <span class="number">64</span> - <span class="number">100</span>, SCREEN_WDITH, <span class="number">100</span> )];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.filterView</span> setBackgroundColor:[<span class="built_in">UIColor</span> colorFromHexCode:<span class="string">@"3a424d"</span>]];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:<span class="keyword">self</span><span class="variable">.filterView</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建选择滑动的滤镜</span></span><br><span class="line">    [<span class="keyword">self</span> crateFilters];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>把滤镜写成以配置方式是考虑到以后很有可能从网上下载滤镜，然后会以本地数据库 <code>Sqlite</code> 形式保存相关参数。</p>
<p> – <strong>创建滤镜</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建滤镜</span></span><br><span class="line">- (<span class="keyword">void</span>)crateFilters &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 总数</span></span><br><span class="line">    NSInteger filterTotal = [self.filterList count];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 预览的效果图 - 一般做法是需要压缩成当前图像的大小，例如 60 *60 例子我是直接使用的。</span></span><br><span class="line">    UIImage *smallImage = self.originalImage;</span><br><span class="line"></span><br><span class="line">    NSInteger i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt; filterTotal; i++) &#123;</span><br><span class="line"></span><br><span class="line">        NSMutableDictionary *tempFilterData = self.filterList[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Box</span></span><br><span class="line">        UIView *filterBoxView = [[UIView alloc] initWithFrame:CGRectMake(i*<span class="number">70</span>, <span class="number">10.0</span>, <span class="number">70.0</span>f, <span class="number">80.0</span>f)];</span><br><span class="line">        [self.filterView addSubview:filterBoxView];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 预览的图像</span></span><br><span class="line">        UIImage *filteredImage = [self filterImage:smallImage withLUTNamed:tempFilterData[@<span class="string">"lookupImage"</span>]];</span><br><span class="line">        UIImageView *tempFilterImageView = [[UIImageView alloc] initWithFrame:CGRectMake(<span class="number">10.0</span>f, <span class="number">0.0</span>f, <span class="number">60.0</span>f, <span class="number">60.0</span>f)];</span><br><span class="line">        tempFilterImageView.image = filteredImage;</span><br><span class="line">        [filterBoxView addSubview:tempFilterImageView];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文字</span></span><br><span class="line">        UILabel *filterLabel = [[UILabel alloc] initWithFrame:CGRectMake(<span class="number">10.0</span>, <span class="number">60.0</span>, <span class="number">60.0</span>, <span class="number">20.0</span>)];</span><br><span class="line">        filterLabel.text = tempFilterData[@<span class="string">"title"</span>];</span><br><span class="line">        filterLabel.backgroundColor = [UIColor colorWithRed:<span class="number">66</span>/<span class="number">255.0</span> green:<span class="number">212</span>/<span class="number">255.0</span> blue:<span class="number">153</span>/<span class="number">255.0</span> alpha:<span class="number">0.75</span>];</span><br><span class="line">        filterLabel.font = [UIFont systemFontOfSize:<span class="number">11</span>];</span><br><span class="line">        filterLabel.textAlignment = NSTextAlignmentCenter;</span><br><span class="line">        filterLabel.textColor = [UIColor whiteColor];</span><br><span class="line">        [filterBoxView addSubview:filterLabel];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 操作</span></span><br><span class="line">        UIButton *actionButton = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class="line">        actionButton.frame  = CGRectMake(<span class="number">10</span>, <span class="number">0.0</span>f, <span class="number">60.0</span>f, <span class="number">80.0</span>f);</span><br><span class="line">        [[actionButton layer] setBorderColor:[[UIColor colorFromHexCode:@<span class="string">"057fed"</span>] CGColor]];</span><br><span class="line">        actionButton.tag = i + <span class="number">20</span>;</span><br><span class="line">        [actionButton addTarget:self action:@selector(filterButtonClick:) forControlEvents:UIControlEventTouchUpInside |UIControlEventTouchDragOutside];</span><br><span class="line">        [filterBoxView addSubview:actionButton];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认选中原图</span></span><br><span class="line">    UIButton *originalButton = [self.view viewWithTag:<span class="number">20</span>];</span><br><span class="line">    [self filterButtonClick:originalButton];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面是生成滤镜预览图，也许你会问这样子会不会很慢？例如生成10多个的。在强大的 <code>iPhone</code> 性能面前事实上并不会，遇到卡况且也有很多种方法去忧化。</p>
<p>– <strong>生成滤镜效果</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图片进行滤镜添加操作</span></span><br><span class="line">- (UIImage *)filterImage:(UIImage *)originalImage withLUTNamed:(NSString *)lutName &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建立原图与</span></span><br><span class="line">    GPUImagePicture *originalImageSource = [[GPUImagePicture alloc] initWithImage:originalImage];</span><br><span class="line">    GPUImagePicture *lookupImageSource = [[GPUImagePicture alloc] initWithImage:[UIImage imageNamed:lutName]];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用这个滤镜类就可以直接对图片进行滤镜添加操作</span></span><br><span class="line">    GPUImageLookupFilter *lookupFilter = [[GPUImageLookupFilter alloc] init];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行滤镜处理</span></span><br><span class="line">    [originalImageSource addTarget:lookupFilter];</span><br><span class="line">    [originalImageSource processImage];</span><br><span class="line"></span><br><span class="line">    [lookupImageSource addTarget:lookupFilter];</span><br><span class="line">    [lookupImageSource processImage];</span><br><span class="line"></span><br><span class="line">    [lookupFilter useNextFrameForImageCapture];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [lookupFilter imageFromCurrentFramebufferWithOrientation:UIImageOrientationUp];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面的代码就是最核心方法了是不是很简单，比起我当初完全没有想象的中的简单多了。</p>
<h3 id="4、给滤镜的源图像进行加密"><strong>4、给滤镜的源图像进行加密</strong></h3><p>你肯定会想辛辛苦苦的设计师调完的滤镜，别人只有导出APP的包就可以看到资源文件那不就白干了吗？</p>
<p>其实我们可以将图像转成 <code>NSData</code>，然后再某个位置加上 <code>token</code> 进行拼接然后保存为文件。读取的时候进行解密就好，性能上麻肯定会有所影响不过我认为影响很微。如果你的滤镜好到别人要逆向工程破解，你早就换一种更有效的方法了。</p>
<h3 id="总结"><strong>总结</strong></h3><p><code>GPUImage</code> 的确是一个伟大的第三方图像处理库，极大简化了我们的工作。 <code>filterImage:</code> 方法看似很简单也花掉了很长的时间去学习研究，各种的折腾希望帮到你。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote><p>滤镜使用 <code>颜色查找表(Color Lookup Table)</code> 方法，对原图的颜色进行改变。就像 <code>PhotoShop</code>中的可选颜色功能，可以把某种的颜色进行改变，例如去掉图像中的黄色，仅对原图进行颜色的更改。</p>
</blockquote>
<p>近期公司的新 <code>App</code> 有图像编辑功能的需求，对我们来说是个新东西大家都没接触过。我查找了很多的资料和例子，最终确定下来使用 <code>颜色查找表(Color Lookup Table)</code> 方法是最合适不过的。因为程序员只要设置好相关代码，无论多少个滤镜效果都可以全部交给设计去做，而我呢只需要配置个文件就可以了。</p>
<p>方法找对了这事很重要！因为很多后续开发都与滤镜相关。</p>
<p>效果如下<a href="https://github.com/CrazySurfBoy/GPUImageLookupTable">（完整的示例下载）</a>：</p>
<p><img src="/image/GPUImageLookupTable.gif" alt="演示"> </p>
<p>接下来的代码简单到你不相信，是的就是这么简单。</p>]]>
    
    </summary>
    
      <category term="Filter" scheme="http://www.crazysurfboy.com/tags/Filter/"/>
    
      <category term="GPUImage" scheme="http://www.crazysurfboy.com/tags/GPUImage/"/>
    
      <category term="iOS" scheme="http://www.crazysurfboy.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[FMDB SQLite 插入 Data 类型的问题]]></title>
    <link href="http://www.crazysurfboy.com/2016/03/07/SQLiteInsertData/"/>
    <id>http://www.crazysurfboy.com/2016/03/07/SQLiteInsertData/</id>
    <published>2016-03-06T16:00:00.000Z</published>
    <updated>2016-10-14T09:37:14.000Z</updated>
    <content type="html"><![CDATA[<blockquote><p><code>FMDB</code> 是轻量级的框架，对 <code>SQLite API</code> 进行了友好的封装，使用起来相当的灵活。同时也非常符合从 <code>Web</code> 开发转移动端开发的人员对数据库的使用，相信你会喜欢它的。</p>
</blockquote>
<p>最近在做模板下载，需要把原来项目中的模板图片和配置文件 <code>PList</code> 保存到 <code>SQLite</code> 数据库便于与线上新模板合并。在知道用户本地的模板数据不会对 <code>SQLite</code> 造成压力，于是也把下载好的模板图片和配置参数一同写入到 <code>SQLite</code>。那样我就不用写文件管理只需要简单的一条删除 <code>SQL</code> 就完成了，简单粗爆。</p>
<h3 id="1、数据类型"><strong>1、数据类型</strong></h3><p>构想是把 <code>NSDictionary</code> 和  <code>UIImage</code> 转成 <code>NSData</code> 数据，找到了 <code>SQLite</code> 相对应的类型为 <code>BLOB</code>，写入进去读出来再转成相应的对象就大功告成了。</p>
<p><strong>写入</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">downloadData[<span class="string">@"imageData"</span>] = <span class="built_in">UIImagePNGRepresentation</span>(image);</span><br><span class="line">downloadData[<span class="string">@"paramData"</span>] = [<span class="built_in">NSKeyedArchiver</span> archivedDataWithRootObject:downloadData[<span class="string">@"param"</span>]];</span><br></pre></td></tr></table></figure></p>
<p><strong>取出：</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSDictionary</span> *paramData = [<span class="built_in">NSKeyedUnarchiver</span> unarchiveObjectWithData:tData[<span class="string">@"paramData"</span>]];</span><br><span class="line"><span class="built_in">UIImage</span> *templateImage = [<span class="built_in">UIImage</span> imageWithData:tData[<span class="string">@"imageData"</span>]];</span><br></pre></td></tr></table></figure></p>
<p>NSLog 出来的语句是这样的</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I<span class="built_in">NSERT</span> INTO template (imageData, ,paramData) VALUES (&lt;<span class="number">89504e47</span>....&gt;,&lt;<span class="number">62706</span>c69 ....&gt;)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>发现读出来的数据是有的，转换成了对象后就失败了。首先是检查 <code>SQLite</code> 中的数据发现存的被存储成下面的格式了，这不是我想要的格式肯定是哪里错了。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="number">89504e47</span> <span class="number">0</span>d0a1a0a <span class="number">0000000</span>d <span class="number">49484452</span> <span class="number">00000438</span> <span class="number">0000076</span>c <span class="number">08060000</span> <span class="number">004</span>ae73c f3000000 <span class="number">01735247</span> <span class="number">4200</span>aece</span><br></pre></td></tr></table></figure>
<p>问题出现在入库的 <code>SQL</code> 上，通常为了避免各种的错误，我都会将对象转成字符后再插入数据库，这样的做法在大多数情况下是正常的。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *keyString = [[fieldData allKeys] componentsJoinedByString:<span class="string">@","</span>];</span><br><span class="line"><span class="built_in">NSString</span> *valueString = [[fieldData allValues] componentsJoinedByString:<span class="string">@","</span>];</span><br><span class="line"><span class="built_in">NSString</span> *sql = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"INSERT INTO %@ (%@) VALUES ('%@')"</span>,tableName, keyString, valueString];</span><br></pre></td></tr></table></figure>
<p>知道了问题所在剩下的事情就是 <code>Google</code> 一下和查看 <code>FMDB</code> 的文档说明，把问题解决掉。</p>
<h3 id="2、正确的插入_Data_数据"><strong>2、正确的插入 <code>Data</code> 数据</strong></h3><p><a href="https://github.com/ccgus/fmdb" target="_blank" rel="external">FMDB官方说明</a></p>
<p>下面可以看到官方已经提供了插入对象的方法，我们只要按照方法进行转换就行。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSInteger</span> identifier = <span class="number">42</span>;</span><br><span class="line"><span class="built_in">NSString</span> *name = <span class="string">@"Liam O'Flaherty (\"the famous Irish author\")"</span>;</span><br><span class="line"><span class="built_in">NSDate</span> *date = [<span class="built_in">NSDate</span> date];</span><br><span class="line"><span class="built_in">NSString</span> *comment = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BOOL</span> success = [db executeUpdate:<span class="string">@"INSERT INTO authors (identifier, name, date, comment) VALUES (?, ?, ?, ?)"</span>, @(identifier), name, date, comment ?: [<span class="built_in">NSNull</span> null]];</span><br><span class="line"><span class="keyword">if</span> (!success) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"error = %@"</span>, [db lastErrorMessage]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote><p><code>FMDB</code> 是轻量级的框架，对 <code>SQLite API</code> 进行了友好的封装，使用起来相当的灵活。同时也非常符合从 <code>Web</code> 开发转移动端开发的人员对数据库的使用，相信你会喜欢它的。</p>
</blockquote>
<p>最近在做模板下载，需要把原来项目中的模板图片和配置文件 <code>PList</code> 保存到 <code>SQLite</code> 数据库便于与线上新模板合并。在知道用户本地的模板数据不会对 <code>SQLite</code> 造成压力，于是也把下载好的模板图片和配置参数一同写入到 <code>SQLite</code>。那样我就不用写文件管理只需要简单的一条删除 <code>SQL</code> 就完成了，简单粗爆。</p>
<h3 id="1、数据类型"><strong>1、数据类型</strong></h3><p>构想是把 <code>NSDictionary</code> 和  <code>UIImage</code> 转成 <code>NSData</code> 数据，找到了 <code>SQLite</code> 相对应的类型为 <code>BLOB</code>，写入进去读出来再转成相应的对象就大功告成了。</p>
<p><strong>写入</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">downloadData[<span class="string">@"imageData"</span>] = <span class="built_in">UIImagePNGRepresentation</span>(image);</span><br><span class="line">downloadData[<span class="string">@"paramData"</span>] = [<span class="built_in">NSKeyedArchiver</span> archivedDataWithRootObject:downloadData[<span class="string">@"param"</span>]];</span><br></pre></td></tr></table></figure></p>
<p><strong>取出：</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSDictionary</span> *paramData = [<span class="built_in">NSKeyedUnarchiver</span> unarchiveObjectWithData:tData[<span class="string">@"paramData"</span>]];</span><br><span class="line"><span class="built_in">UIImage</span> *templateImage = [<span class="built_in">UIImage</span> imageWithData:tData[<span class="string">@"imageData"</span>]];</span><br></pre></td></tr></table></figure></p>
<p>NSLog 出来的语句是这样的</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I<span class="built_in">NSERT</span> INTO template (imageData, ,paramData) VALUES (&lt;<span class="number">89504e47</span>....&gt;,&lt;<span class="number">62706</span>c69 ....&gt;)</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="FMDB" scheme="http://www.crazysurfboy.com/tags/FMDB/"/>
    
      <category term="SQLite" scheme="http://www.crazysurfboy.com/tags/SQLite/"/>
    
      <category term="iOS" scheme="http://www.crazysurfboy.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[App Store - Why Reject Me]]></title>
    <link href="http://www.crazysurfboy.com/2016/01/31/Rejected/"/>
    <id>http://www.crazysurfboy.com/2016/01/31/Rejected/</id>
    <published>2016-01-30T16:00:00.000Z</published>
    <updated>2016-10-14T09:37:05.000Z</updated>
    <content type="html"><![CDATA[<blockquote><p><code>App</code> 审核，苹果虐我千百遍我对它如初恋，相信这是很多 <code>iOS</code> 从业的人生感悟。</p>
</blockquote>
<p>如果你是一枚 iOS 开发者，相信你会遇到过在应用提交审核一周后，在万分期待时然后在半夜收到 App 被拒的消息。相信这种感觉你肯定不好受，安卓的开发者你们是不会懂的！</p>
<p>然而这些被拒的原因多种多样，下面我列举我数个 APP 提交时被到被拒绝的原恩。</p>
<h3 id="悲惨的经历"><strong>悲惨的经历</strong></h3><ul>
<li><p><strong>1、你的APP你包含了 <code>Beta</code> 字样，我们不接受任何测试版的 <code>App</code> 在 <code>AppStore</code> 中发布</strong></p>
</li>
<li><p><strong>2、你的 <code>App</code> 包含了音乐下载(其实是一个电台节目，只是开头有一首歌播放) 请提供 <code>XXXXX</code> 。最后的方法只能审核的时候去掉，具体你懂的</strong></p>
</li>
<li><p><strong>3、你的关于我们的版本号与 <code>AppStore</code> 不一至，测试时都没注意到</strong></p>
</li>
<li><p><strong>4、你的屏蔽截图与你的功能不一至（其实是截图图忘记了换新的，包括着下载的按扭的图）</strong></p>
</li>
<li><p><strong>5、你的 <code>APP</code> 显示网络错误、显示不正常。一查。。。虽然架设了海外服但忘记了测试，因为只有在美国审核才走国外服务器。</strong></p>
</li>
<li><p><strong>6、让用户生成的内容没有举报机制。这类的 <code>APP</code> 大家都没有经验，学习了</strong></p>
</li>
<li><p><strong>7、微信第三方登录不能要求用户安装才能使用(微博和QQ都有网页授权)，最后作检测了有安装才显示。</strong></p>
</li>
<li><p><strong>8、下载的内容放到 <code>Document</code> 文件夹并被 <code>iCloud</code> 同步备份了，苹果认为这是不应该被备份的。最后通过，不让 <code>iCloud</code> 备份</strong></p>
</li>
<li><p><strong>9、<code>APP</code> 勾选了广告标识但审核时发现没有广告，其实是它那边审核时没显示截个有广告的图给它，一天后过审核。</strong></p>
</li>
<li><p><strong>10、忘记提供测试账号。(如果你的 <code>APP</code> 有登录功能)</strong></p>
</li>
</ul>
<h3 id="总结"><strong>总结</strong></h3><p>苹果的 <code>App</code> 审核要小心谨慎，因为不同的审核人员不同的 <code>App</code> 类型审核的标准都不一样。在上传 <code>App</code> 的时候开发人员一定要重新检查一次，用你的经验让 <code>App</code>上传的成功率提高。</p>
<p>好多时候产品、总监、设计等参与的人都没有你熟悉苹果的审核标准，这并不是阅读了审核指南就成事 <code>OK</code>。这也在另一方面为什么新公司在做苹果的 <code>App</code>审核好多次都过不去原因，苹果并不是一次过把所有的问题都帮你列出来而是遇到问题就不会再往下查找了。</p>
<p>最近新上传的 <code>App</code> 也是交足了学习经验。</p>
<p>第一次是因为苹果审核的人使用的是海外服而我们测试在国内服务器，数据不正常 <code>So...</code></p>
<p>第二次是因为用户生成的内容需要有举报功能，这个是我们没有想到的同时也是学习了。</p>
<a id="more"></a>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote><p><code>App</code> 审核，苹果虐我千百遍我对它如初恋，相信这是很多 <code>iOS</code> 从业的人生感悟。</p>
</blockquote>
<p>如果你是一枚 iOS 开发者，相信你会遇到过在应用提交审核一周后，在万分期待时然后在半夜收到 App 被拒的消息。相信这种感觉你肯定不好受，安卓的开发者你们是不会懂的！</p>
<p>然而这些被拒的原因多种多样，下面我列举我数个 APP 提交时被到被拒绝的原恩。</p>
<h3 id="悲惨的经历"><strong>悲惨的经历</strong></h3><ul>
<li><p><strong>1、你的APP你包含了 <code>Beta</code> 字样，我们不接受任何测试版的 <code>App</code> 在 <code>AppStore</code> 中发布</strong></p>
</li>
<li><p><strong>2、你的 <code>App</code> 包含了音乐下载(其实是一个电台节目，只是开头有一首歌播放) 请提供 <code>XXXXX</code> 。最后的方法只能审核的时候去掉，具体你懂的</strong></p>
</li>
<li><p><strong>3、你的关于我们的版本号与 <code>AppStore</code> 不一至，测试时都没注意到</strong></p>
</li>
<li><p><strong>4、你的屏蔽截图与你的功能不一至（其实是截图图忘记了换新的，包括着下载的按扭的图）</strong></p>
</li>
<li><p><strong>5、你的 <code>APP</code> 显示网络错误、显示不正常。一查。。。虽然架设了海外服但忘记了测试，因为只有在美国审核才走国外服务器。</strong></p>
</li>
<li><p><strong>6、让用户生成的内容没有举报机制。这类的 <code>APP</code> 大家都没有经验，学习了</strong></p>
</li>
<li><p><strong>7、微信第三方登录不能要求用户安装才能使用(微博和QQ都有网页授权)，最后作检测了有安装才显示。</strong></p>
</li>
<li><p><strong>8、下载的内容放到 <code>Document</code> 文件夹并被 <code>iCloud</code> 同步备份了，苹果认为这是不应该被备份的。最后通过，不让 <code>iCloud</code> 备份</strong></p>
</li>
<li><p><strong>9、<code>APP</code> 勾选了广告标识但审核时发现没有广告，其实是它那边审核时没显示截个有广告的图给它，一天后过审核。</strong></p>
</li>
<li><p><strong>10、忘记提供测试账号。(如果你的 <code>APP</code> 有登录功能)</strong></p>
</li>
</ul>
<h3 id="总结"><strong>总结</strong></h3><p>苹果的 <code>App</code> 审核要小心谨慎，因为不同的审核人员不同的 <code>App</code> 类型审核的标准都不一样。在上传 <code>App</code> 的时候开发人员一定要重新检查一次，用你的经验让 <code>App</code>上传的成功率提高。</p>
<p>好多时候产品、总监、设计等参与的人都没有你熟悉苹果的审核标准，这并不是阅读了审核指南就成事 <code>OK</code>。这也在另一方面为什么新公司在做苹果的 <code>App</code>审核好多次都过不去原因，苹果并不是一次过把所有的问题都帮你列出来而是遇到问题就不会再往下查找了。</p>
<p>最近新上传的 <code>App</code> 也是交足了学习经验。</p>
<p>第一次是因为苹果审核的人使用的是海外服而我们测试在国内服务器，数据不正常 <code>So...</code></p>
<p>第二次是因为用户生成的内容需要有举报功能，这个是我们没有想到的同时也是学习了。</p>]]>
    
    </summary>
    
      <category term="Reject" scheme="http://www.crazysurfboy.com/tags/Reject/"/>
    
      <category term="iOS" scheme="http://www.crazysurfboy.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ReactiveCocoa - 登录交互效果的实现]]></title>
    <link href="http://www.crazysurfboy.com/2016/01/13/LoginWithReactiveCocoa/"/>
    <id>http://www.crazysurfboy.com/2016/01/13/LoginWithReactiveCocoa/</id>
    <published>2016-01-12T16:00:00.000Z</published>
    <updated>2016-10-14T09:36:48.000Z</updated>
    <content type="html"><![CDATA[<blockquote><p>Demo：用 <code>ReactiveCocoa</code> 做一个登录的交互效果，当用户输入邮箱或者密码不符时字体为红色并且登录按扭程灰色并不可点。相反的邮箱和密码都符合规定时字体为灰色并且登录按扭为深绿色并可点击。</p>
</blockquote>
<p>有点经验的都会觉得这种效果实现起来很简单但麻烦，常用的方法 <code>Delegate</code>、<code>target-action</code>、<code>KVC</code> 等组合使用，而且代码页面的粘合性也比很强。现在我们使用 <code>ReactiveCocoa</code> 来实现不但统一所有的消息，代码也更加的简洁直观，与页面的粘合性也不再这么强，相对在重用时会简单点。</p>
<p>不过 <code>ReactiveCocoa</code> 并不是为了降低编程的难度存在的，而是解决一些问题。相反入门的门槛相对较高，对于习惯了 <code>OC</code>编程的人，思想的转换才是难点。本文并不是教程更像是指南性文章，让你了解 <code>ReactiveCocoa</code> 是一个怎样的东西。</p>
<p>效果如下<a href="https://github.com/CrazySurfBoy/LoginWithReactiveCocoa" target="_blank" rel="external">（完整的示例下载）</a>：</p>
<p><img src="/image/LoginWithReactiveCocoa.gif" alt="演示"> </p>
<p>看一下它和我们一般使用的方法有什么不一样</p>
<a id="more"></a>
<h3 id="1、创建UI界面"><strong>1、创建UI界面</strong></h3><p>UI界面采用最常用的方法全代码构建，当然这不是什么重点，有需要直接下载源码看看就好。</p>
<h3 id="2、使用_ReactiveCocoa_创建_Signals"><strong>2、使用 ReactiveCocoa 创建 Signals</strong></h3><p><code>signals</code> 有很多的事件类型，每个事件会返回一个或者多个 <code>block</code>。也可以简单的理解成很多的 <code>block</code> 的回调事件。</p>
<p><strong>验证用户名的信道：</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建验证用户名的信道</span></span><br><span class="line">    RACSignal *validUsernameSignal = [<span class="keyword">self</span><span class="variable">.usernameTextField</span><span class="variable">.rac_textSignal</span></span><br><span class="line">        map:^<span class="keyword">id</span>(<span class="built_in">NSString</span> *text) &#123;</span><br><span class="line">            <span class="keyword">return</span> @([<span class="keyword">self</span> isValidUsername:text]);</span><br><span class="line">        &#125;]; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过信道返回的值，设置文本框的文字色</span></span><br><span class="line">    RAC(<span class="keyword">self</span><span class="variable">.usernameTextField</span>, textColor) = [validUsernameSignal</span><br><span class="line">        map:^<span class="keyword">id</span>(<span class="built_in">NSNumber</span> *usernameValid) &#123;</span><br><span class="line">            <span class="keyword">return</span> [usernameValid boolValue] ? [<span class="built_in">UIColor</span> colorFromHexCode:<span class="string">@"666666"</span>]:[<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证用户名</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isValidUsername:(<span class="built_in">NSString</span> *)username &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证用户名 - 邮箱</span></span><br><span class="line">    <span class="built_in">NSString</span> *emailRegex = <span class="string">@"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]&#123;2,4&#125;"</span>; </span><br><span class="line">    <span class="built_in">NSPredicate</span> *emailTest = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF MATCHES %@"</span>, emailRegex];      </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [emailTest evaluateWithObject:username];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过<code>map</code> 我们将接收到的用户输入的字符传入 <code>isValidUsername</code> 进行验证并且返回<code>bool</code> 。<code>RAC(self.usernameTextField, textColor)</code> 能够直接更改属性值 <code>validUsernameSignal</code> 此时返回 <code>bool</code> 值，再通过 <code>map</code> 事件改变其返回的值，让它直接返回一个颜色值。</p>
<p>上面的代码已经实现了当然用户输入的邮箱格式不对文本一直为红色。这里并没用使用任何的 <code>Delegate</code>、<code>target-action</code>、<code>KVC</code>就实现了。</p>
<p><strong>同理，用户输入密码也一样：</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建验证密码的信号</span></span><br><span class="line">    RACSignal *validPasswordSignal = [<span class="keyword">self</span><span class="variable">.passwordTextField</span><span class="variable">.rac_textSignal</span> </span><br><span class="line">        map:^<span class="keyword">id</span>(<span class="built_in">NSString</span> *text) &#123; </span><br><span class="line">            <span class="keyword">return</span> @([<span class="keyword">self</span> isValidPassword:text]);</span><br><span class="line">        &#125;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过信道返回的值，设置文本框的文字色</span></span><br><span class="line">    RAC(<span class="keyword">self</span><span class="variable">.passwordTextField</span>, textColor) = [validPasswordSignal</span><br><span class="line">        map:^<span class="keyword">id</span>(<span class="built_in">NSNumber</span> *passwordValid) &#123;</span><br><span class="line">            <span class="keyword">return</span> [passwordValid boolValue] ? [<span class="built_in">UIColor</span> colorFromHexCode:<span class="string">@"666666"</span>]:[<span class="built_in">UIColor</span> redColor];</span><br><span class="line">        &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证密码的长度</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isValidPassword:(<span class="built_in">NSString</span> *)password &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> password<span class="variable">.length</span> &gt; <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下我们就要让<code>登录按扭</code>跟着 <code>用户名</code>与<code>密码</code>的信道返回的进行改版背景色和可不可点状态：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建登录按扭的信号，把用户名与密码合成一个信道</span></span><br><span class="line">RACSignal *loginActiveSignal = [RACSignal </span><br><span class="line">    combineLatest:@[</span><br><span class="line">        validUsernameSignal, </span><br><span class="line">        validPasswordSignal</span><br><span class="line">    ]</span><br><span class="line">    reduce:^id(NSNumber*usernameValid, NSNumber *passwordValid) &#123;</span><br><span class="line">        <span class="keyword">return</span> @([usernameValid boolValue] &amp;&amp; [passwordValid boolValue]);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅 loginActiveSignal, 使按扭是否可用</span></span><br><span class="line">[loginActiveSignal subscribeNext:^(NSNumber*loginActiveSignal) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ([loginActiveSignal boolValue]) &#123;</span><br><span class="line"></span><br><span class="line">        self.loginButton.enabled = YES;</span><br><span class="line">        [self.loginButton setBackgroundColor:[UIColor colorFromHexCode:@<span class="string">"1cbf61"</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        self.loginButton.enabled = NO;</span><br><span class="line">        [self.loginButton setBackgroundColor:[UIColor grayColor]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>上面我们把 <code>validUsernameSignal</code> 和 <code>validPasswordSignal</code> 分开创建的意义也在于此，因为事实上可以不分开写的，上面的代码就是开头 <code>Demo</code> 实现主要的全部。</p>
<h3 id="总结"><strong>总结</strong></h3><p><code>ReactiveCocoa</code> 实现了登录的互动效果，代码的确简洁了很多但不简单。要入门还是会有一点的难度,再加上团队中各人也并不一定都会 <code>ReactiveCocoa</code>，所以维护也是个问题，目前只能小范围的使用一下。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote><p>Demo：用 <code>ReactiveCocoa</code> 做一个登录的交互效果，当用户输入邮箱或者密码不符时字体为红色并且登录按扭程灰色并不可点。相反的邮箱和密码都符合规定时字体为灰色并且登录按扭为深绿色并可点击。</p>
</blockquote>
<p>有点经验的都会觉得这种效果实现起来很简单但麻烦，常用的方法 <code>Delegate</code>、<code>target-action</code>、<code>KVC</code> 等组合使用，而且代码页面的粘合性也比很强。现在我们使用 <code>ReactiveCocoa</code> 来实现不但统一所有的消息，代码也更加的简洁直观，与页面的粘合性也不再这么强，相对在重用时会简单点。</p>
<p>不过 <code>ReactiveCocoa</code> 并不是为了降低编程的难度存在的，而是解决一些问题。相反入门的门槛相对较高，对于习惯了 <code>OC</code>编程的人，思想的转换才是难点。本文并不是教程更像是指南性文章，让你了解 <code>ReactiveCocoa</code> 是一个怎样的东西。</p>
<p>效果如下<a href="https://github.com/CrazySurfBoy/LoginWithReactiveCocoa">（完整的示例下载）</a>：</p>
<p><img src="/image/LoginWithReactiveCocoa.gif" alt="演示"> </p>
<p>看一下它和我们一般使用的方法有什么不一样</p>]]>
    
    </summary>
    
      <category term="ReactiveCocoa" scheme="http://www.crazysurfboy.com/tags/ReactiveCocoa/"/>
    
      <category term="iOS" scheme="http://www.crazysurfboy.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UIWebView+JS图片缓存实现]]></title>
    <link href="http://www.crazysurfboy.com/2015/11/16/UIWebView+JS/"/>
    <id>http://www.crazysurfboy.com/2015/11/16/UIWebView+JS/</id>
    <published>2015-11-15T16:00:00.000Z</published>
    <updated>2016-10-14T09:37:19.000Z</updated>
    <content type="html"><![CDATA[<blockquote><p>因为公司的APP线路的详细页有大量的HMTL和图片，而且最少也有好几屏幕的长度。再加上图片很大也很多，速度很好的情况下加载的速度也要平均在5秒左右。</p>
</blockquote>
<p>这个页主要使用 <code>UIWebView + HTML</code> 展示数据，另外部分 <code>View</code> 和  <code>UIWebView</code> 添加到 <code>UIScrollView</code>,这样滑动起来让用户感觉不到是网页。也许你会想为什么不用模板引擎例如：<code>MGTemplateEngine</code> 配置多种模板展示？由于运营的需求是每条线路样式和内容都会不一样无法归类成N个模板，再加上我们需要在多个平台中使用同(So…你懂的)，只能尽最大的程度去忧化。</p>
<p><img src="/image/UIWebView_1.png" alt="演示">  <img src="/image/UIWebView_2.png" alt="演示"></p>
<p>接下来看一下如何将加载速度提升2-3倍</p>
<a id="more"></a>
<h3 id="1、页面数据组成的方式"><strong>1、页面数据组成的方式</strong></h3><p>首先获取详细的<code>HTML</code>代码并在最后加上<code>JS</code>，然后替换图片地址并设置一个新的属性，这一步是为了加快加载的速度和后续的<code>JS</code>处理。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取HMTL内容</span></span><br><span class="line">- (<span class="keyword">void</span>)getHTML &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取服务端的HTML</span></span><br><span class="line">    <span class="built_in">NSString</span> *urlStr = <span class="string">@"http://www.crazysurfboy.com/app-1000.html"</span>;</span><br><span class="line">    contentHtml = [<span class="built_in">NSString</span> stringWithContentsOfURL:[<span class="built_in">NSURL</span> URLWithString:urlStr] encoding: <span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取本地JS文件，把JS加到最后面</span></span><br><span class="line">    <span class="built_in">NSString</span> *jsPath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"DetalJavascript"</span> ofType:<span class="string">@"html"</span>];</span><br><span class="line">    <span class="built_in">NSString</span>* jsHtml = [<span class="built_in">NSString</span> stringWithContentsOfFile:jsPath encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认加载的图片</span></span><br><span class="line">    <span class="built_in">NSString</span> *imageHTMLString = <span class="string">@"src=\"http://www.crazysurfboy.com/uploads/default_image_logo.png\" asrc"</span>;</span><br><span class="line">    contentHtml = [contentHtml stringByReplacingOccurrencesOfString:<span class="string">@"src"</span> withString:imageHTMLString];</span><br><span class="line">    contentHtml = [contentHtml stringByAppendingString:jsHtml];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.htmlWebView</span> loadHTMLString:contentHtml baseURL:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过产品<code>id</code>获取整个线路的<code>HMTL</code>加载到 <code>UIWebView</code> 再通过<code>JS</code>的方法得到<code>HTML</code>的总高度。此时<code>headerView</code>已添加到了 <code>detailScrollView</code> 占300高度，此时只需要把<code>UIWebView</code>添加进去设置好<code>y</code>值，然后添加到 <code>detailScrollView</code>，再重新设置 <code>detailScrollView.contentSize</code> </p>
<h3 id="2、WebViewJavascriptBridge"><strong>2、WebViewJavascriptBridge</strong></h3><p>参考资料：<a href="http://honglu.me/2014/09/27/WebViewJavascriptBridge使用/" target="_blank" rel="external">WebViewJavascriptBridge使用</a></p>
<p>以往简单的操作通常用<code>webView:shouldStartLoadWithRequest:navigationType:</code> 和 <code>stringByEvaluatingJavaScriptFromString:</code> 进行<code>JS</code>和<code>OC</code>互相调用。对于相对复杂的操作也许就没有这么方便了。所以我们会使用开源库 <code>WebViewJavascriptBridge</code><br><strong>GitHub</strong>:<a href="https://github.com/marcuswestin/WebViewJavascriptBridge" target="_blank" rel="external">WebViewJavascriptBridge</a></p>
<p>OC端：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> WebViewJavascriptBridge* bridge;</span><br></pre></td></tr></table></figure></p>
<p>在<code>viewDidLoad</code> 初始化代码如下，在初始化中直接包含了一个用于接收JS的回调：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这一段初始化都是一样的</span></span><br><span class="line"><span class="keyword">self</span><span class="variable">.bridge</span> = [WebViewJavascriptBridge bridgeForWebView:<span class="keyword">self</span><span class="variable">.htmlWebView</span> webViewDelegate:<span class="keyword">self</span> handler:^(<span class="keyword">id</span> data, WVJBResponseCallback responseCallback) &#123;</span><br><span class="line">    DLog(<span class="string">@"ObjC received message from JS: %@"</span>, data);</span><br><span class="line">    responseCallback(<span class="string">@"Response for message from ObjC"</span>);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一段是将从JS返回的图片数组到OC中下载并缓存起来</span></span><br><span class="line">[<span class="keyword">self</span><span class="variable">.bridge</span> registerHandler:<span class="string">@"ImageURLObjcCallback"</span> handler:^(<span class="keyword">id</span> data, WVJBResponseCallback responseCallback) &#123;</span><br><span class="line">    [<span class="keyword">self</span> downloadAllImagesInNative:data];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p>
<p>JS端：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下是固定写法，你自己的JS文件中必须包含如下代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connectWebViewJavascriptBridge</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.WebViewJavascriptBridge) &#123;</span><br><span class="line">        callback(WebViewJavascriptBridge)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">'WebViewJavascriptBridgeReady'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            callback(WebViewJavascriptBridge)</span><br><span class="line">        &#125;, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册相关的回调</span></span><br><span class="line">connectWebViewJavascriptBridge(<span class="function"><span class="keyword">function</span>(<span class="params">bridge</span>) </span>&#123;</span><br><span class="line">    bridge.init(<span class="function"><span class="keyword">function</span>(<span class="params">message, responseCallback</span>) </span>&#123;</span><br><span class="line">        log(<span class="string">'JS got a message'</span>, message)</span><br><span class="line">        <span class="keyword">var</span> data = &#123; <span class="string">'Javascript Responds'</span>:<span class="string">'Wee!'</span> &#125;</span><br><span class="line">        log(<span class="string">'JS responding with'</span>, data)</span><br><span class="line">        responseCallback(data)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找可见区域内的图片URL</span></span><br><span class="line">    bridge.registerHandler(<span class="string">'findVisibleImageUrlHandler'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data, responseCallback</span>) </span>&#123;</span><br><span class="line">        findVisibleImageUrl(data.contentOffsetY, data.offsetHeight);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把URL换成cache的URL</span></span><br><span class="line">    bridge.registerHandler(<span class="string">'imagesDownloadCompleteHandler'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data, responseCallback</span>) </span>&#123;</span><br><span class="line">        imagesDownloadComplete(data[<span class="number">0</span>], data[<span class="number">1</span>]);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找可见区域内的图片URL</span></span><br><span class="line">    bridge.registerHandler(<span class="string">'ScrollViewDidScrollHandler'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data, responseCallback</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//alert("aaaa");</span></span><br><span class="line">        getScrollHeight(data.contentOffsetY);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一段其实是网上常用的图片延迟加载方法</span></span><br><span class="line"><span class="comment">// 就算你不使用图片缓存，只是简单的把图片地址替换回去同样可以加快很多的速度</span></span><br><span class="line"><span class="keyword">var</span> v = &#123;</span><br><span class="line">        eleGroup: <span class="literal">null</span>, <span class="comment">// 图片数组</span></span><br><span class="line">        limitHeight: <span class="number">0</span>, <span class="comment">// 偏移量</span></span><br><span class="line">        imageUrlsArray: <span class="literal">null</span>, <span class="comment">// url数组</span></span><br><span class="line">        willCompleteImageArray: <span class="literal">null</span>, <span class="comment">// 可见高度也就是读取图片高度，如果你内容不会翻到好几页，大可以不需要。</span></span><br><span class="line">        isGetScrollHeight:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  获取所有img标签URL的数据</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAllImageURL</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取图片标签并转化为数组</span></span><br><span class="line">    v.eleGroup = <span class="built_in">document</span>.querySelectorAll(<span class="string">"img"</span>);</span><br><span class="line">    v.eleGroup = <span class="built_in">Array</span>.prototype.slice.call(v.eleGroup, <span class="number">0</span>);</span><br><span class="line">    v.replaceImageArray = </span><br><span class="line">    v.imageUrlsArray = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把URL塞到数组</span></span><br><span class="line">    v.eleGroup.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> esrc = image.getAttribute(<span class="string">"asrc"</span>);</span><br><span class="line">        v.imageUrlsArray.push(esrc);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  找出两倍屏幕大小的可见的图片的对象</span><br><span class="line"> *  由于我们内容往往很长，以用户滚动的距离去加载图片，这一步可以减轻服务器负担也可以为用户省流量。</span><br><span class="line"> *</span><br><span class="line"> *  @param float  scrollView.contentOffset.y</span><br><span class="line"> *  @param float  偏移高度 - 原生 + UIWebView</span><br><span class="line"> *  </span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findVisibleImageUrl</span>(<span class="params">contentOffsetY, offsetHeight</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    offsetHeight = <span class="built_in">Number</span>(offsetHeight);</span><br><span class="line">    contentOffsetY = <span class="built_in">Number</span>(contentOffsetY);</span><br><span class="line">    <span class="keyword">var</span> tempImageUrlsArray = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">var</span> sedImageUrlsArray = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">var</span> tempEleGroup = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 滚动到UIWebView才开始查找图片位置</span></span><br><span class="line">    <span class="keyword">if</span> ( (v.limitHeight == <span class="number">0</span>) || (contentOffsetY &gt; v.limitHeight)) &#123;</span><br><span class="line">        v.limitHeight = <span class="built_in">Number</span>(v.limitHeight) + offsetHeight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">            </span><br><span class="line">    <span class="comment">// 根据仿移量，定位图像是否在预设的可见区域，并且减去已经显示过的图片，减小循环次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = v.eleGroup.length; i &lt; j; i++) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断位置并添加到数组，传回到OC</span></span><br><span class="line">        <span class="keyword">if</span> (v.eleGroup[i].offsetTop &lt;= v.limitHeight) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"contentOffsetY:"</span> + contentOffsetY + <span class="string">"  v.limitHeight:"</span> + v.limitHeight + <span class="string">"   v.eleGroup[i].offsetTop:"</span> + v.eleGroup[i].offsetTop);</span><br><span class="line">            sedImageUrlsArray.push(v.imageUrlsArray[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tempImageUrlsArray.push(v.imageUrlsArray[i]);</span><br><span class="line">            tempEleGroup.push(v.eleGroup[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v.imageUrlsArray = tempImageUrlsArray;</span><br><span class="line">    v.eleGroup = tempEleGroup;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把显示区域的图像数组返回去OC</span></span><br><span class="line">    bridgeImageURLCallback(sedImageUrlsArray);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  发送收到的URL到OC</span><br><span class="line"> *</span><br><span class="line"> *  @param str 图像的地址</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bridgeImageURLCallback</span>(<span class="params">imageURL</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    connectWebViewJavascriptBridge(<span class="function"><span class="keyword">function</span>(<span class="params">bridge</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        bridge.callHandler(<span class="string">'ImageURLObjcCallback'</span>, imageURL, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//log('JS got response', response)</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  将图片的URL 换成 cache 的URL</span><br><span class="line"> *</span><br><span class="line"> *  @param dic          要修改的字典</span><br><span class="line"> *  </span><br><span class="line"> *  @return NSInter类型的时间戳</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imagesDownloadComplete</span>(<span class="params">pOldUrl, pNewUrl</span>) </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取未替换的图片</span></span><br><span class="line">    <span class="keyword">var</span> tempImageUrlsArray = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">if</span> (v.willCompleteImageArray == <span class="literal">null</span>) &#123;</span><br><span class="line">        v.willCompleteImageArray = <span class="built_in">document</span>.querySelectorAll(<span class="string">"img"</span>);</span><br><span class="line">        v.willCompleteImageArray = <span class="built_in">Array</span>.prototype.slice.call(v.willCompleteImageArray, <span class="number">0</span>);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找并替换图像(Base64String)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = v.willCompleteImageArray.length; i &lt; j; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v.willCompleteImageArray[i].getAttribute(<span class="string">"asrc"</span>) == pOldUrl || v.willCompleteImageArray[i].getAttribute(<span class="string">"asrc"</span>) == <span class="built_in">decodeURIComponent</span>(pOldUrl)) &#123;</span><br><span class="line">            v.willCompleteImageArray[i].src = pNewUrl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tempImageUrlsArray.push(v.willCompleteImageArray[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v.willCompleteImageArray = tempImageUrlsArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载完HTML，获取所有的图像</span></span><br><span class="line">getAllImageURL();</span><br></pre></td></tr></table></figure>
<p>上面的<code>js</code>代码都有完整的注译，因为很多的写<code>oc</code>的未必能懂<code>js</code>。</p>
<h3 id="3、OC与JS交互"><strong>3、OC与JS交互</strong></h3><p><code>UIWebView</code>加载完<code>HMTL</code>会调用 <code>webViewDidFinishLoad:</code> 告诉我们已经加载完毕。而此时所有的图片都是我们设置的默认图片，加载起来相当的快。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sent after a web view finishes loading a frame.</span></span><br><span class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// offsetHeight 如果设为1000，那么当contentOffsetY为1001的时候，offsetHeight为 2001</span></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.bridge</span> callHandler:<span class="string">@"findVisibleImageUrlHandler"</span> data:@&#123; <span class="string">@"contentOffsetY"</span>:<span class="string">@"1"</span>, <span class="string">@"offsetHeight"</span>:<span class="string">@"1000"</span> &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由于我禁用了<code>UIWebView</code>的滚动，所以必须要手动的传回给JS</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)scrollViewDidScroll:(<span class="built_in">UIScrollView</span> *)scrollView &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">NSString</span> *contentOffsetY = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%.f"</span>, scrollView<span class="variable">.contentOffset</span><span class="variable">.y</span>];</span><br><span class="line">  [<span class="keyword">self</span><span class="variable">.bridge</span> callHandler:<span class="string">@"findVisibleImageUrlHandler"</span> data:@&#123; <span class="string">@"contentOffsetY"</span>:contentOffsetY, <span class="string">@"offsetHeight"</span>:<span class="string">@"1000"</span> &#125;];</span><br></pre></td></tr></table></figure>
<p>当<code>bridgeImageURLCallback</code>这个JS被调后呢，会调用以下方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用OC把URL下载到本地</span></span><br><span class="line">-(<span class="keyword">void</span>)downloadAllImagesInNative:(<span class="built_in">NSString</span> *)imageURL &#123;</span><br><span class="line"></span><br><span class="line">    SDWebImageManager *manager = [SDWebImageManager sharedManager];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSString</span> *_url = imageURL;</span><br><span class="line"></span><br><span class="line">        [manager downloadImageWithURL:[<span class="built_in">NSURL</span> URLWithString:_url] options:SDWebImageHighPriority progress:<span class="literal">nil</span> completed:^(<span class="built_in">UIImage</span> *image, <span class="built_in">NSError</span> *error, SDImageCacheType cacheType, <span class="built_in">BOOL</span> finished, <span class="built_in">NSURL</span> *imageURL) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (image) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">NSString</span> *imgB64 = [<span class="built_in">UIImageJPEGRepresentation</span>(image, <span class="number">1.0</span>) base64EncodedStringWithOptions:<span class="built_in">NSDataBase64Encoding64CharacterLineLength</span>];</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 把图片在磁盘中的地址传回给JS</span></span><br><span class="line">                    <span class="built_in">NSString</span> *key = [manager cacheKeyForURL:imageURL];</span><br><span class="line">                    <span class="comment">//DLog(@"key:%@", key);</span></span><br><span class="line"></span><br><span class="line">                    <span class="built_in">NSString</span> *source = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"data:image/png;base64,%@"</span>, imgB64];</span><br><span class="line">                    [<span class="keyword">self</span><span class="variable">.bridge</span> callHandler:<span class="string">@"imagesDownloadCompleteHandler"</span> data:@[key,source]];</span><br><span class="line"></span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从<code>SDWebImageManager</code> 缓存的图片转成<code>imgB64</code>就能实现<code>UIWebView</code>缓存。不过同时也带来了一个问题，因为<code>imgB64</code>转成字符它还是那么大，如果一个页面的图片同时塞进<code>HTML</code>，那么这个<code>HTML</code>可能会有几十M，所以如何使用还是看情况。在不能改动版面的情况下，我现在并没有做<code>SDWebImageManager</code>缓存，仅仅是重新的替换<code>URL</code>，但也能加快加载的速度也在寻找解决的方案。</p>
<h3 id="总结"><strong>总结</strong></h3><p>整个流程也相对简单<br>1、替换<code>HTML</code>所有的图片地址。<br>2、<code>JS</code>取出<code>HTML</code>所有的图片。<br>3、跟据滚动的<code>offsetY</code>判断需要加载的图片。<br>4、使用<code>OC</code>下载图片并缓存起来转成<code>imgB64</code>。<br>5、替换<code>HTML</code>的图片地址。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote><p>因为公司的APP线路的详细页有大量的HMTL和图片，而且最少也有好几屏幕的长度。再加上图片很大也很多，速度很好的情况下加载的速度也要平均在5秒左右。</p>
</blockquote>
<p>这个页主要使用 <code>UIWebView + HTML</code> 展示数据，另外部分 <code>View</code> 和  <code>UIWebView</code> 添加到 <code>UIScrollView</code>,这样滑动起来让用户感觉不到是网页。也许你会想为什么不用模板引擎例如：<code>MGTemplateEngine</code> 配置多种模板展示？由于运营的需求是每条线路样式和内容都会不一样无法归类成N个模板，再加上我们需要在多个平台中使用同(So…你懂的)，只能尽最大的程度去忧化。</p>
<p><img src="/image/UIWebView_1.png" alt="演示">  <img src="/image/UIWebView_2.png" alt="演示"></p>
<p>接下来看一下如何将加载速度提升2-3倍</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.crazysurfboy.com/tags/JavaScript/"/>
    
      <category term="UIScrollView" scheme="http://www.crazysurfboy.com/tags/UIScrollView/"/>
    
      <category term="UIWebView" scheme="http://www.crazysurfboy.com/tags/UIWebView/"/>
    
      <category term="WebViewJavascriptBridge" scheme="http://www.crazysurfboy.com/tags/WebViewJavascriptBridge/"/>
    
      <category term="iOS" scheme="http://www.crazysurfboy.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[下拉刷新动画效果的实现]]></title>
    <link href="http://www.crazysurfboy.com/2015/11/03/PullRefreshAnimation/"/>
    <id>http://www.crazysurfboy.com/2015/11/03/PullRefreshAnimation/</id>
    <published>2015-11-02T16:00:00.000Z</published>
    <updated>2016-10-14T09:36:58.000Z</updated>
    <content type="html"><![CDATA[<p>我们修改流行的下拉刷新库 <a href="https://github.com/enormego/EGOTableViewPullRefresh" target="_blank" rel="external">EGOTableViewPullRefresh</a> 来完成目前多数APP都具备的下拉刷新动画，下面说说它实现的基本原理。</p>
<p><strong>通过代理方法 <code>- (void)scrollViewDidScroll:</code> 获得当前 <code>scrollView.contentOffset.y</code> 的值，通过这个值的变化作各种的动画效果，例如演示图中的慢慢填充的效果。<br>当用户放开手后<code>- (void)scrollViewDidEndDragging:</code> 触发，当判定<code>y</code>值达到某一个负数时，就可以判定是下拉刷新操作，否而当作放弃操作。然后通过 <code>UIEdgeInsetMake</code> 设置 <code>scroll.contnetInset</code>，就可以显示刷新时间、加载等信息。当我们完成请求后调用方法重新设置 <code>scroll.contentInset</code> 的 <code>UIEdgeInsertMake top 0</code> 并设置过渡动画效果;</strong></p>
<p>效果如下<a href="https://github.com/CrazySurfBoy/PullRefreshAnimation" target="_blank" rel="external">（完整的示例下载）</a>：</p>
<p><img src="/image/pullRefreshAnimation.gif" alt="演示"> </p>
<p>下面我要看看代码是如何实现的 ( UI是用代码创建的，你很方便的能修改 )</p>
<a id="more"></a>
<h3 id="1、旋转的加载动画类_PullActivityIndicator"><strong>1、旋转的加载动画类 PullActivityIndicator</strong></h3><p><strong>这个类负责将两张图片叠加在一起，并将最底的那一种图片无限的旋转达到加载动画的效果</strong></p>
<p>创建一个 <code>PullActivityIndicator</code> 自定义的类，负责加载旋转动画效果<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)startAnimating &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否已经常见过动画，如果已经创建则不再创建动画</span></span><br><span class="line">    <span class="built_in">CAAnimation</span> *exiestAnimation = [<span class="keyword">self</span><span class="variable">.animateCircle</span><span class="variable">.layer</span> animationForKey:<span class="string">@"rotate"</span>];</span><br><span class="line">    <span class="keyword">if</span> (exiestAnimation) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显示</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.hidden</span> = <span class="literal">NO</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置动画让它旋转起来</span></span><br><span class="line">    <span class="built_in">CABasicAnimation</span> *animation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"transform.rotation.z"</span>];</span><br><span class="line">    animation<span class="variable">.fromValue</span> = @<span class="number">0</span>;</span><br><span class="line">    animation<span class="variable">.toValue</span> = @(<span class="number">2</span>*M_PI);</span><br><span class="line">    animation<span class="variable">.repeatCount</span> = HUGE_VALF;</span><br><span class="line">    animation<span class="variable">.duration</span> = <span class="number">1.0</span>f;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.animateCircle</span><span class="variable">.layer</span> addAnimation:animation forKey:<span class="string">@"rotate"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当加载完成后调用停止方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 停止动画</span></span><br><span class="line">- (<span class="keyword">void</span>)stopAnimating &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.hidden</span> = <span class="literal">YES</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.animateCircle</span><span class="variable">.layer</span> removeAllAnimations];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的类，我们会在<code>EGOTableViewPullRefresh</code> 这个类中创建并使用，相当简单。</p>
<h3 id="2、_遮罩动画效果类_PullMaskProgress"><strong>2、 遮罩动画效果类 PullMaskProgress</strong></h3><p><strong>通过传入值百分比，灰色的图片将从灰色图片渐渐的变成全蓝色的图片，当然你可以根据你喜欢改图标和颜色</strong><br>画出一个正方形，并使它在灰色图像也就是Logo的位置下方<br>关于<code>CALayer</code>的 <code>mask</code>可以参考这里 <a href="http://www.cocoachina.com/ios/20151012/13637.html" target="_blank" rel="external">（使用CALayer的Mask实现注水动画效果）</a><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得画出上下的正方形</span></span><br><span class="line">- (<span class="built_in">CALayer</span> *)crateMaskLayer &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CALayer</span> *mask = [<span class="built_in">CALayer</span> layer];</span><br><span class="line">    mask<span class="variable">.frame</span> = <span class="keyword">self</span><span class="variable">.colorImageView</span><span class="variable">.bounds</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 画出一个矩形</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.maskLayerDown</span> = [<span class="built_in">CAShapeLayer</span> layer];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.maskLayerDown</span><span class="variable">.bounds</span> = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, PullMaskWidth, PullMaskHeight);</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.maskLayerDown</span><span class="variable">.fillColor</span> = [<span class="built_in">UIColor</span> greenColor]<span class="variable">.CGColor</span>; </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.maskLayerDown</span><span class="variable">.path</span> = [<span class="built_in">UIBezierPath</span> bezierPathWithRect:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, PullMaskWidth, PullMaskHeight)]<span class="variable">.CGPath</span>;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.maskLayerDown</span><span class="variable">.position</span> = <span class="built_in">CGPointMake</span>(PullMaskWidth/<span class="number">2</span>, PullMaskHeight + <span class="number">15</span>); <span class="comment">// 使它在灰色图标的下面</span></span><br><span class="line">    [mask addSublayer:<span class="keyword">self</span><span class="variable">.maskLayerDown</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试用，查看蒙板的位置</span></span><br><span class="line">    <span class="comment">//[self.layer addSublayer:self.maskLayerDown];</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过设置 <code>- (void)setMaskPercent:</code> 传入的百分比，绿色的方形将会渐渐的往上移动，实现一个类似填充的效果（实际上是蓝色的图标）。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置蒙板占图像的百分比</span></span><br><span class="line">- (<span class="keyword">void</span>)setMaskPercent:(<span class="keyword">float</span>)percent &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">float</span> offsetY = percent * (PullMaskHeight + <span class="number">15</span> - PullMaskHeight/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.maskLayerDown</span><span class="variable">.position</span> = <span class="built_in">CGPointMake</span>(PullMaskWidth/<span class="number">2</span>, PullMaskHeight + <span class="number">15</span> - offsetY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面的代码实现了由0.0 - 1.0的渐变效果，下面我们要直接来修改 <code>EGOTableViewPullRefresh</code> 这个类要实现我们要的效果。</p>
<h3 id="3、修改_EGOTableViewPullRefresh"><strong>3、修改 EGOTableViewPullRefresh</strong></h3><p>关键的部分我会说一下，详细的可以看完整的Demo，原部分代码我没有清掉，只是注译了。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)egoRefreshScrollViewDidScroll:(<span class="built_in">UIScrollView</span> *)scrollView &#123;  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 显示灰色的图标，目的是为了加载完了使它复位</span></span><br><span class="line">  <span class="keyword">if</span> (_state == EGOOPullRefreshNormal) &#123;</span><br><span class="line">    <span class="keyword">if</span> (scrollView<span class="variable">.contentOffset</span><span class="variable">.y</span> &lt; -<span class="number">1</span> &amp;&amp; scrollView<span class="variable">.contentOffset</span><span class="variable">.y</span> &gt; -<span class="number">10</span>) &#123;</span><br><span class="line">      <span class="keyword">self</span><span class="variable">.pullMaskProgress</span><span class="variable">.hidden</span> = <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (_state == EGOOPullRefreshLoading) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGFloat</span> offset = MAX(scrollView<span class="variable">.contentOffset</span><span class="variable">.y</span> * -<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    offset = MIN(offset, <span class="number">60</span>);</span><br><span class="line">    scrollView<span class="variable">.contentInset</span> = <span class="built_in">UIEdgeInsetsMake</span>(offset, <span class="number">0.0</span>f, <span class="number">0.0</span>f, <span class="number">0.0</span>f);</span><br><span class="line">    </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (scrollView<span class="variable">.isDragging</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算百分比，并设置过渡的效果</span></span><br><span class="line">    <span class="keyword">float</span> p = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">if</span> (scrollView<span class="variable">.contentOffset</span><span class="variable">.y</span> &lt; -<span class="number">20</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果超过 y 起过了-45，设置成百分百</span></span><br><span class="line">        <span class="keyword">if</span> (scrollView<span class="variable">.contentOffset</span><span class="variable">.y</span> &lt; - <span class="number">65</span>) &#123;</span><br><span class="line">            p = <span class="number">1.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p = (scrollView<span class="variable">.contentOffset</span><span class="variable">.y</span> + <span class="number">10</span>) / -<span class="number">65</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.pullMaskProgress</span> setMaskPercent:p]; <span class="comment">// 遮罩会根据百分比向上移，会有一个过渡的效果</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">BOOL</span> _loading = <span class="literal">NO</span>;</span><br><span class="line">    <span class="keyword">if</span> ([_delegate respondsToSelector:<span class="keyword">@selector</span>(egoRefreshTableHeaderDataSourceIsLoading:)]) &#123;</span><br><span class="line">      _loading = [_delegate egoRefreshTableHeaderDataSourceIsLoading:<span class="keyword">self</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (_state == EGOOPullRefreshPulling &amp;&amp; scrollView<span class="variable">.contentOffset</span><span class="variable">.y</span> &gt; -<span class="number">65.0</span>f &amp;&amp; scrollView<span class="variable">.contentOffset</span><span class="variable">.y</span> &lt; <span class="number">0.0</span>f &amp;&amp; !_loading) &#123;</span><br><span class="line"></span><br><span class="line">      [<span class="keyword">self</span> setState:EGOOPullRefreshNormal];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_state == EGOOPullRefreshNormal &amp;&amp; scrollView<span class="variable">.contentOffset</span><span class="variable">.y</span> &lt; -<span class="number">65.0</span>f &amp;&amp; !_loading) &#123;</span><br><span class="line">      [<span class="keyword">self</span> setState:EGOOPullRefreshPulling];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (scrollView<span class="variable">.contentInset</span><span class="variable">.top</span> != <span class="number">0</span>) &#123;</span><br><span class="line">      scrollView<span class="variable">.contentInset</span> = <span class="built_in">UIEdgeInsetsZero</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码我们通过 <code>scrollView.contentOffset.y</code> 的值计算出下拉的幅度来判断是否进行下拉操作和遮罩百分的动画效果。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 状态设置  </span></span><br><span class="line">- (<span class="keyword">void</span>)setState:(EGOPullRefreshState)aState&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">switch</span> (aState) &#123;</span><br><span class="line">    <span class="keyword">case</span> EGOOPullRefreshPulling:</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> EGOOPullRefreshNormal: <span class="comment">// 正常</span></span><br><span class="line">      </span><br><span class="line">      [<span class="keyword">self</span><span class="variable">.pullActivityIndicator</span> stopAnimating]; </span><br><span class="line"></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> EGOOPullRefreshLoading: <span class="comment">// 正在加载</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 开始加载，开始旋转动画</span></span><br><span class="line">      [<span class="keyword">self</span><span class="variable">.pullActivityIndicator</span> startAnimating];</span><br><span class="line">      <span class="keyword">self</span><span class="variable">.pullMaskProgress</span><span class="variable">.hidden</span> = <span class="literal">YES</span>;</span><br><span class="line">      [<span class="keyword">self</span><span class="variable">.pullMaskProgress</span> setMaskPercent:<span class="number">0.0</span>];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  _state = aState;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过不同的状态进行设置不同的加载效果</p>
<h3 id="总结"><strong>总结</strong></h3><p>由于用到的东西挺多的不能一一的详解，所以我都会在Demo里的注译得很清楚。这也是我平时工作的习惯，也是一起共事的同事很少来问我这是什么原因。</p>
<p>只要你理解了整个的下拉刷新的原理，你可以做成目前所有流行的下拉刷新效果，他们的原理也是一至。再强大的教程也不如一份完整的Demo实在。</p>
<p>源码点击这里 <a href="https://github.com/CrazySurfBoy/PullRefreshAnimation" target="_blank" rel="external">（示例下载）</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们修改流行的下拉刷新库 <a href="https://github.com/enormego/EGOTableViewPullRefresh">EGOTableViewPullRefresh</a> 来完成目前多数APP都具备的下拉刷新动画，下面说说它实现的基本原理。</p>
<p><strong>通过代理方法 <code>- (void)scrollViewDidScroll:</code> 获得当前 <code>scrollView.contentOffset.y</code> 的值，通过这个值的变化作各种的动画效果，例如演示图中的慢慢填充的效果。<br>当用户放开手后<code>- (void)scrollViewDidEndDragging:</code> 触发，当判定<code>y</code>值达到某一个负数时，就可以判定是下拉刷新操作，否而当作放弃操作。然后通过 <code>UIEdgeInsetMake</code> 设置 <code>scroll.contnetInset</code>，就可以显示刷新时间、加载等信息。当我们完成请求后调用方法重新设置 <code>scroll.contentInset</code> 的 <code>UIEdgeInsertMake top 0</code> 并设置过渡动画效果;</strong></p>
<p>效果如下<a href="https://github.com/CrazySurfBoy/PullRefreshAnimation">（完整的示例下载）</a>：</p>
<p><img src="/image/pullRefreshAnimation.gif" alt="演示"> </p>
<p>下面我要看看代码是如何实现的 ( UI是用代码创建的，你很方便的能修改 )</p>]]>
    
    </summary>
    
      <category term="CALayer" scheme="http://www.crazysurfboy.com/tags/CALayer/"/>
    
      <category term="UITableView" scheme="http://www.crazysurfboy.com/tags/UITableView/"/>
    
      <category term="iOS" scheme="http://www.crazysurfboy.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个简单的过渡动画]]></title>
    <link href="http://www.crazysurfboy.com/2015/10/13/SplashView/"/>
    <id>http://www.crazysurfboy.com/2015/10/13/SplashView/</id>
    <published>2015-10-12T16:00:00.000Z</published>
    <updated>2016-10-14T09:37:10.000Z</updated>
    <content type="html"><![CDATA[<p>这个动画效果相当的简单没什么难点，但效果还算是不错的。索性就贴出来给有需要的朋友。</p>
<p><img src="/image/splashView.gif" alt="演示"> </p>
<p>下面我要看看代码是如何实现的</p>
<a id="more"></a>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"ViewController.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define SCREEN_HEIGHT [UIScreen mainScreen].bounds.size.height</span></span><br><span class="line"><span class="preprocessor">#define SCREEN_WDITH [UIScreen mainScreen].bounds.size.width</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *splashView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIImageView</span> *iconImageView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 背景</span></span><br><span class="line">    <span class="built_in">UIImageView</span> *photoImageView = [[<span class="built_in">UIImageView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, SCREEN_WDITH, SCREEN_HEIGHT)];</span><br><span class="line">    photoImageView<span class="variable">.image</span> = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"website.PNG"</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:photoImageView];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置图标和背景颜色</span></span><br><span class="line">    <span class="built_in">UIImage</span> *icon = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"twitterIcon.png"</span>];</span><br><span class="line">    <span class="built_in">UIColor</span> *color = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">64</span>/<span class="number">255.0</span> green:<span class="number">153</span>/<span class="number">255.0</span> blue:<span class="number">255</span>/<span class="number">255.0</span> alpha:<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加 View</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.splashView</span> = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, SCREEN_WDITH, SCREEN_HEIGHT)];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.splashView</span> setBackgroundColor:color];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:<span class="keyword">self</span><span class="variable">.splashView</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  图标        </span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.iconImageView</span> = [<span class="built_in">UIImageView</span> new];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.iconImageView</span><span class="variable">.image</span> = [icon imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysTemplate</span>];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.iconImageView</span><span class="variable">.tintColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.iconImageView</span><span class="variable">.frame</span> = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">120</span>, <span class="number">120</span>);</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.iconImageView</span><span class="variable">.contentMode</span> = <span class="built_in">UIViewContentModeScaleAspectFit</span>;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.iconImageView</span><span class="variable">.center</span> = <span class="keyword">self</span><span class="variable">.splashView</span><span class="variable">.center</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.splashView</span> addSubview:<span class="keyword">self</span><span class="variable">.iconImageView</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</span><br><span class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidAppear:(<span class="built_in">BOOL</span>)animated</span><br><span class="line">&#123;</span><br><span class="line">  [<span class="keyword">super</span> viewDidAppear:animated];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* wait a beat before animating in */</span></span><br><span class="line">  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line"></span><br><span class="line">      [<span class="keyword">self</span> splashAnimation];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)splashAnimation &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  持续时间</span></span><br><span class="line">    <span class="built_in">CGFloat</span> shrinkDuration = <span class="number">1</span> * <span class="number">1.5</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> growDuration = <span class="number">1</span> * <span class="number">0.7</span>;</span><br><span class="line"></span><br><span class="line">    __block __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  第一个动画是让它按比例缩小并有弹簧效果</span></span><br><span class="line">    [<span class="built_in">UIView</span> animateWithDuration:shrinkDuration delay:<span class="number">0</span> usingSpringWithDamping:<span class="number">0.5</span>f initialSpringVelocity:<span class="number">7</span> options:<span class="built_in">UIViewAnimationOptionCurveEaseInOut</span> animations:^&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CGAffineTransform</span> scaleTransform = <span class="built_in">CGAffineTransformMakeScale</span>(<span class="number">0.75</span>, <span class="number">0.75</span>);</span><br><span class="line">        weakSelf<span class="variable">.iconImageView</span><span class="variable">.transform</span> = scaleTransform;</span><br><span class="line">    &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 放大并逐渐消失</span></span><br><span class="line">        [<span class="built_in">UIView</span> animateWithDuration:growDuration animations:^&#123;</span><br><span class="line">            <span class="built_in">CGAffineTransform</span> scaleTransform = <span class="built_in">CGAffineTransformMakeScale</span>(<span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">            weakSelf<span class="variable">.iconImageView</span><span class="variable">.transform</span> = scaleTransform;</span><br><span class="line">            weakSelf<span class="variable">.splashView</span><span class="variable">.alpha</span> = <span class="number">0</span>;</span><br><span class="line">        &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">            [weakSelf<span class="variable">.splashView</span> removeFromSuperview];</span><br><span class="line">            </span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>这个动画效果相当的简单没什么难点，但效果还算是不错的。索性就贴出来给有需要的朋友。</p>
<p><img src="/image/splashView.gif" alt="演示"> </p>
<p>下面我要看看代码是如何实现的</p>]]>
    
    </summary>
    
      <category term="Animation" scheme="http://www.crazysurfboy.com/tags/Animation/"/>
    
      <category term="iOS" scheme="http://www.crazysurfboy.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自定义 View Controller 转场动画(1)]]></title>
    <link href="http://www.crazysurfboy.com/2015/10/12/viewControllerTransitioning/"/>
    <id>http://www.crazysurfboy.com/2015/10/12/viewControllerTransitioning/</id>
    <published>2015-10-11T16:00:00.000Z</published>
    <updated>2016-10-14T09:37:24.000Z</updated>
    <content type="html"><![CDATA[<p>本文探讨了改变 <code>UINavigationController</code> 两个 <code>view controller</code> 之间的转场动画，但是这些做法在其它自己定义的 <code>view controller</code> 容器也是通用的，后续的文章也会有探讨。</p>
<p>看一下我们要实现的效果如下<a href="https://github.com/CrazySurfBoy/ViewControllerTransition_1" target="_blank" rel="external">（示例下载）</a>：</p>
<p><img src="/image/transition1.gif" alt="演示"> </p>
<p>下面我要看看代码是如何实现的 ( UI是用代码创建的，你很方便的能修改 )。</p>
<a id="more"></a>
<h3 id="1、自定义一个类，并实现_UIViewControllerContextTransitioning_这个协义"><strong>1、自定义一个类，并实现 UIViewControllerContextTransitioning 这个协义</strong></h3><p><strong>转场上下文 (Transitioning Contexts) 定义了转场时需要的元数据，比如在转场过程中所参与的视图控制器和视图的相关属性。 转场上下文对象遵从 UIViewControllerContextTransitioning 协议，并且这是由系统负责生成和提供的。</strong></p>
<p>创建一个 <code>Animator</code> 自定义的类，负责转场动画执行的效果<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Animator</span> : <span class="title">NSObject</span> &lt;<span class="title">UIViewControllerAnimatedTransitioning</span>&gt;</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> isPush; <span class="comment">// 区分navigation是push还是pop操作</span></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<p>我们必须要实现两个方法，一个是定义动画持续时间：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSTimeInterval</span>)transitionDuration:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外的一个方法是定义动画执行的效果：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)animateTransition:(<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 拿到前后的 View Controller</span></span><br><span class="line">    <span class="built_in">UIViewController</span>* toViewController = [transitionContext viewControllerForKey:<span class="built_in">UITransitionContextToViewControllerKey</span>];</span><br><span class="line">    <span class="built_in">UIViewController</span>* fromViewController = [transitionContext viewControllerForKey:<span class="built_in">UITransitionContextFromViewControllerKey</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 有一个回弹的效果距离</span></span><br><span class="line">    <span class="comment">// self.isPush 判断是否是push 动画，否则就是pop，动画效果是一样的，只是方向不一样</span></span><br><span class="line">    <span class="built_in">CGFloat</span> travelDistance = [transitionContext containerView]<span class="variable">.bounds</span><span class="variable">.size</span><span class="variable">.width</span> + kChildViewPadding;</span><br><span class="line">    <span class="built_in">CGAffineTransform</span> travel = <span class="built_in">CGAffineTransformMakeTranslation</span> (<span class="keyword">self</span><span class="variable">.isPush</span> ? -travelDistance : travelDistance, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    [[transitionContext containerView] addSubview:toViewController<span class="variable">.view</span>];</span><br><span class="line">    toViewController<span class="variable">.view</span><span class="variable">.alpha</span> = <span class="number">0</span>;</span><br><span class="line">    toViewController<span class="variable">.view</span><span class="variable">.transform</span> = <span class="built_in">CGAffineTransformInvert</span> (travel);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里是实现我们的 弹簧动画效果</span></span><br><span class="line">    [<span class="built_in">UIView</span> animateWithDuration:[<span class="keyword">self</span> transitionDuration:transitionContext] delay:<span class="number">0</span> usingSpringWithDamping:kDamping initialSpringVelocity:kInitialSpringVelocity options:<span class="number">0x00</span> animations:^&#123;</span><br><span class="line">        fromViewController<span class="variable">.view</span><span class="variable">.transform</span> = travel;</span><br><span class="line">        fromViewController<span class="variable">.view</span><span class="variable">.alpha</span> = <span class="number">0</span>;</span><br><span class="line">        toViewController<span class="variable">.view</span><span class="variable">.transform</span> = <span class="built_in">CGAffineTransformIdentity</span>;</span><br><span class="line">        toViewController<span class="variable">.view</span><span class="variable">.alpha</span> = <span class="number">1</span>;</span><br><span class="line">    &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">        fromViewController<span class="variable">.view</span><span class="variable">.transform</span> = <span class="built_in">CGAffineTransformIdentity</span>;</span><br><span class="line">        [transitionContext completeTransition:![transitionContext transitionWasCancelled]];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码我们通过<code>id&lt;UIViewControllerContextTransitioning</code> 获取了一个参数：<code>transitionContext</code> 上下文，从而可以获取需要做转场动画的两个 view controller做一个弹簧动画效果。执行完动画之后需要调用 <code>transitionContext completeTransition:</code> 这个方法来更新 <code>view controller</code> 的状态，<br>以上就是我们转场动画执行效果的部分，剩下的就很简单了。</p>
<h3 id="2、列表_FirstViewController"><strong>2、列表 FirstViewController</strong></h3><p><strong>动画控制器 (Animation Controllers) 遵从 UIViewControllerAnimatedTransitioning 协议，并且负责实际执行动画。</strong><br>首先要告诉 <code>UINavigationController</code> 我们要使用 <code>UIViewControllerAnimatedTransitioning</code><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidAppear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.navigationController</span><span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通常习惯的做法会在 <code>- (void)viewDidLoad</code> 中设置代理，不过这里不一样。<br>因为我们会在另外一个 <code>view controller</code> 会使用同一个 <code>UINavigationController</code> 实例，所以在 pop 的时候如果不重新设置，那么这个代理就会一直在push那个 <code>view controller</code> 。</p>
<p>我们需要实现 <code>UINavigationControllerDelegate</code> 这个协义里面的一个方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Called to allow the delegate to return a noninteractive animator object for use during view controller transitions.</span></span><br><span class="line"><span class="comment">// 我们从这里实现我们的自定义Push动画</span></span><br><span class="line">- (<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)navigationController:(<span class="built_in">UINavigationController</span> *)navigationController animationControllerForOperation:(<span class="built_in">UINavigationControllerOperation</span>)operation fromViewController:(<span class="built_in">UIViewController</span> *)fromVC toViewController:(<span class="built_in">UIViewController</span> *)toVC &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (operation == <span class="built_in">UINavigationControllerOperationPush</span>) &#123;</span><br><span class="line">        <span class="comment">// self.animator.isPush 判断是否是push 动画，否则就是pop，动画效果是一样的，只是方向不一样</span></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.animator</span><span class="variable">.isPush</span> = <span class="literal">YES</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.animator</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上的代码我们就已经实现了把 <code>self.navigationController pushViewController:</code> 动画变为左向右并且据有弹簧效果的转场动画。接下来，我们要建一个 <code>view controller</code> 也就是需要push到的那个页。</p>
<h3 id="2、创建_SecondViewController"><strong>2、创建 SecondViewController</strong></h3><p>同理 <code>self.navigationController popViewControllerAnimated:</code> 动画也是跟上面的代码一样的做法，只是稍微有点不一样。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)navigationController:(<span class="built_in">UINavigationController</span> *)navigationController animationControllerForOperation:(<span class="built_in">UINavigationControllerOperation</span>)operation fromViewController:(<span class="built_in">UIViewController</span> *)fromVC toViewController:(<span class="built_in">UIViewController</span> *)toVC &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 仅仅判断改成 UINavigationControllerOperationPop</span></span><br><span class="line">    <span class="keyword">if</span> (operation == <span class="built_in">UINavigationControllerOperationPop</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.animator</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面我们就完成了自定义 <code>push</code> 和 <code>pop</code> 的转场动画。好像还少了点东西，没错我们现在加入从屏幕左边缘滑动的手势操作来返回到上一个页面，。</p>
<h3 id="3、交互式的转场动画">3、交互式的转场动画</h3><p><strong>交互控制器 (Interaction Controllers) 通过遵从 UIViewControllerInteractiveTransitioning 协议来控制可交互式的转场。</strong><br>我们创建一个由屏幕左边向右滑动的手势，从而产生互动过渡</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当用户从屏幕边缘左半部分开始滑动的时候，我们才把动画效果设为交互式</span></span><br><span class="line">    <span class="built_in">UIScreenEdgePanGestureRecognizer</span>* edgePanGestureRecognizer = [[<span class="built_in">UIScreenEdgePanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(edgePanGesture:)];</span><br><span class="line">    edgePanGestureRecognizer<span class="variable">.edges</span> = <span class="built_in">UIRectEdgeLeft</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.navigationController</span><span class="variable">.view</span> addGestureRecognizer:edgePanGestureRecognizer];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>令转场动画产生交互的方法很简单，仅需要复盖 <code>UINavigationControllerDelegate</code> 的一个方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Called to allow the delegate to return an interactive animator object for use during view controller transitions.</span></span><br><span class="line">- (<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerInteractiveTransitioning</span>&gt;)navigationController:(<span class="built_in">UINavigationController</span> *)navigationController interactionControllerForAnimationController:(<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationController &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注意，在非交互式动画效果中，该方法返回 nil。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.interactionController</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码 <code>self.interactionController</code> 是 <code>UIPercentDrivenInteractiveTransition</code> 的一个实例，我们不需要任何的设置就可以使用。</p>
<p>手势方法代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左边缘手势</span></span><br><span class="line">- (<span class="keyword">void</span>)edgePanGesture:(<span class="built_in">UIScreenEdgePanGestureRecognizer</span>*)recognizer &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIView</span> *view = <span class="keyword">self</span><span class="variable">.view</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算你手指滑动占屏幕的百分比，这个和你滑动的距离无关</span></span><br><span class="line">    <span class="built_in">CGFloat</span> percent = [recognizer translationInView:<span class="keyword">self</span><span class="variable">.view</span>]<span class="variable">.x</span> / <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.bounds</span><span class="variable">.size</span><span class="variable">.width</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手势开始,创建一个 UIPercentDrivenInteractiveTransition 对象</span></span><br><span class="line">    <span class="keyword">if</span> (recognizer<span class="variable">.state</span> == <span class="built_in">UIGestureRecognizerStateBegan</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.interactionController</span> = [[<span class="built_in">UIPercentDrivenInteractiveTransition</span> alloc] init];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.navigationController</span> popViewControllerAnimated:<span class="literal">YES</span>];</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (recognizer<span class="variable">.state</span> == <span class="built_in">UIGestureRecognizerStateChanged</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手指滑动占屏幕的百分比告诉 UIPercentDrivenInteractiveTransition</span></span><br><span class="line">        <span class="built_in">CGPoint</span> translation = [recognizer translationInView:view];</span><br><span class="line">        <span class="built_in">CGFloat</span> d = fabs(translation<span class="variable">.x</span> / <span class="built_in">CGRectGetWidth</span>(view<span class="variable">.bounds</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// d 为什么除么5？主要是为了让过渡更加的平缓，可自行调整</span></span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.interactionController</span> updateInteractiveTransition:d/<span class="number">5</span>];</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (recognizer<span class="variable">.state</span> == <span class="built_in">UIGestureRecognizerStateEnded</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当手指滑动占屏幕超过50%的时间，认为已经完成.否则取消</span></span><br><span class="line">        <span class="keyword">if</span> (percent &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">            [<span class="keyword">self</span><span class="variable">.interactionController</span> finishInteractiveTransition];</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            [<span class="keyword">self</span><span class="variable">.interactionController</span> cancelInteractiveTransition];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.interactionController</span> = <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上的代码中，<code>self.interactionController updateInteractiveTransition:</code> 表示当我们滑头手指时，动画的效果会随着我们算出的百分比来走。<br>同时我们也要通过<code>self.interactionController finishInteractiveTransition:</code> 和 <code>self.interactionController cancelInteractiveTransition:</code> 来判断手势是否完成。<br>当手势结束的时候我们也要将 <code>self.interactionController = nil</code> ，因为如果下一次转场不是交互式的，我们不应该返回这个旧的 <code>self.interactionController</code></p>
<p>自定义转场动画就是这么简单，你可以发挥你的想象做出各种的效果。当然完整能运行的代码也有，而且都有注译的，很容易理解。<br>源码点击这里 <a href="https://github.com/CrazySurfBoy/ViewControllerTransition_1" target="_blank" rel="external">（示例下载）</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文探讨了改变 <code>UINavigationController</code> 两个 <code>view controller</code> 之间的转场动画，但是这些做法在其它自己定义的 <code>view controller</code> 容器也是通用的，后续的文章也会有探讨。</p>
<p>看一下我们要实现的效果如下<a href="https://github.com/CrazySurfBoy/ViewControllerTransition_1">（示例下载）</a>：</p>
<p><img src="/image/transition1.gif" alt="演示"> </p>
<p>下面我要看看代码是如何实现的 ( UI是用代码创建的，你很方便的能修改 )。</p>]]>
    
    </summary>
    
      <category term="Animation" scheme="http://www.crazysurfboy.com/tags/Animation/"/>
    
      <category term="Transitioning" scheme="http://www.crazysurfboy.com/tags/Transitioning/"/>
    
      <category term="UINavigationController" scheme="http://www.crazysurfboy.com/tags/UINavigationController/"/>
    
      <category term="iOS" scheme="http://www.crazysurfboy.com/tags/iOS/"/>
    
  </entry>
  
</feed>
